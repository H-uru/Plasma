# /*==LICENSE==*
#
# CyanWorlds.com Engine - MMOG client, server and tools
# Copyright (C) 2011  Cyan Worlds, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Additional permissions under GNU GPL version 3 section 7
#
# If you modify this Program, or any covered work, by linking or
# combining it with any of RAD Game Tools Bink SDK, Autodesk 3ds Max SDK,
# NVIDIA PhysX SDK, Microsoft DirectX SDK, OpenSSL library, Independent
# JPEG Group JPEG library, Microsoft Windows Media SDK, or Apple QuickTime SDK
# (or a modified version of those libraries),
# containing parts covered by the terms of the Bink SDK EULA, 3ds Max EULA,
# PhysX SDK EULA, DirectX SDK EULA, OpenSSL and SSLeay licenses, IJG
# JPEG Library README, Windows Media SDK EULA, or QuickTime SDK EULA, the
# licensors of this Program grant you additional
# permission to convey the resulting work. Corresponding Source for a
# non-source form of such a combination shall include the source code for
# the parts of OpenSSL and IJG JPEG Library used as well as that of the covered
# work.
#
# You can contact Cyan Worlds, Inc. by email legal@cyan.com
#  or by snail mail at:
#       Cyan Worlds, Inc.
#       14617 N Newport Hwy
#       Mead, WA   99021
#
# *==LICENSE==*/

# NOTE: This stub file was generated automatically from Plasma's Python interface.
# Do not edit this file manually.
# To change any of the docstrings or function signatures,
# edit the corresponding C++ glue code in pfPython.
# If the Python interface has changed, regenerate these stubs
# by running the following call in the in-game Python console:
# >>> __import__("generate_stubs").run()

"""Plasma 2.0 GameMgr Library"""

from __future__ import annotations
from typing import *

class ptGameCli:
    """Abstract bass class for legacy game clients."""

    gameID: int
    """The ID of the game instance on the server."""

    handler: Any
    """The game event handler."""

    isLocallyOwned: bool
    """Whether or not we are the owner of this game instance."""

    ownerID: int
    """The ID of the player who owns this game instance."""

    def leaveGame(self) -> None:
        """Explicitly ask the server to allow us to leave the game."""
        ...

class ptGmBlueSpiral(ptGameCli):
    """Legacy blue spiral game client."""

    def hitCloth(self, cloth: int) -> None:
        """Request for the server to hit a specific cloth index and validate the correct sequence of cloth inputs."""
        ...

    @staticmethod
    def isSupported() -> bool:
        """Checks for the presence of a server-side blue spiral game manager."""
        ...

    @staticmethod
    def join(handler: Any, tableID: int) -> None:
        """Join a common blue spiral game in the current Age."""
        ...

    def startGame(self) -> None:
        """Request for the server to start the game timer."""
        ...

class ptGmMarker(ptGameCli):
    """Legacy marker game client."""

    def addMarker(self, x: float, y: float, z: float, name: str, age: str) -> None:
        """Request for the server to add a new marker to the game."""
        ...

    def captureMarker(self, markerId: int) -> None:
        """Request for the server to register a capture of the specified marker for our team."""
        ...

    def changeGameName(self, name: str) -> None:
        """Request for the server to change the internal marker game name."""
        ...

    def changeMarkerName(self, markerID: int) -> None:
        """Request for the server to change the name of a specific marker from the game."""
        ...

    def changeTimeLimit(self, timeLimit: int) -> None:
        """Request for the server to change the marker game's time limit."""
        ...

    @staticmethod
    def create(handler: Any, gameType: int, templateId: Optional[str]) -> None:
        """Initialize a new marker game client with the server."""
        ...

    def deleteGame(self) -> None:
        """Request for the server to delete all data associated with this game, including the marker definitions and game name."""
        ...

    def deleteMarker(self, markerID: int) -> None:
        """Request for the server to delete a specific marker from the game."""
        ...

    @staticmethod
    def isSupported() -> bool:
        """Checks for the presence of a server-side marker game manager."""
        ...

    def pauseGame(self) -> None:
        """Request for the server to pause the marker game."""
        ...

    def resetGame(self) -> None:
        """Request for the server to clear all markers to the uncaptured state."""
        ...

    def startGame(self) -> None:
        """Request for the server to start the marker game."""
        ...

class ptGmVarSync(ptGameCli):
    """Legacy var sync game client."""

    def createVariable(self):
        """Create a new variable on the server."""
        ...

    @staticmethod
    def isSupported():
        """Checks for the presence of a server-side var sync game manager."""
        ...

    @staticmethod
    def join():
        """Join the common var sync game in the current Age."""
        ...

    def setVariable(self):
        """Change the value of a variable on the server."""
        ...
