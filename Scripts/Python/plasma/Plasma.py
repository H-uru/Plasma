# /*==LICENSE==*
#
# CyanWorlds.com Engine - MMOG client, server and tools
# Copyright (C) 2011  Cyan Worlds, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Additional permissions under GNU GPL version 3 section 7
#
# If you modify this Program, or any covered work, by linking or
# combining it with any of RAD Game Tools Bink SDK, Autodesk 3ds Max SDK,
# NVIDIA PhysX SDK, Microsoft DirectX SDK, OpenSSL library, Independent
# JPEG Group JPEG library, Microsoft Windows Media SDK, or Apple QuickTime SDK
# (or a modified version of those libraries),
# containing parts covered by the terms of the Bink SDK EULA, 3ds Max EULA,
# PhysX SDK EULA, DirectX SDK EULA, OpenSSL and SSLeay licenses, IJG
# JPEG Library README, Windows Media SDK EULA, or QuickTime SDK EULA, the
# licensors of this Program grant you additional
# permission to convey the resulting work. Corresponding Source for a
# non-source form of such a combination shall include the source code for
# the parts of OpenSSL and IJG JPEG Library used as well as that of the covered
# work.
#
# You can contact Cyan Worlds, Inc. by email legal@cyan.com
#  or by snail mail at:
#       Cyan Worlds, Inc.
#       14617 N Newport Hwy
#       Mead, WA   99021
#
# *==LICENSE==*/

# NOTE: This stub file was generated automatically from Plasma's Python interface.
# Do not edit this file manually.
# To change any of the docstrings or function signatures,
# edit the corresponding C++ glue code in pfPython.
# If the Python interface has changed, regenerate these stubs
# by running the following call in the in-game Python console:
# >>> __import__("generate_stubs").run()

"""Plasma 2.0 Game Library"""

from __future__ import annotations
from PlasmaConstants import *
from typing import *

def PtAcceptInviteInGame(friendName, inviteKey):
    """Sends a VaultTask to the server to perform the invite"""
    ...

def PtAmCCR():
    """Returns true if local player is a CCR"""
    ...

def PtAtTimeCallback(selfkey, time, id):
    """This will create a timer callback that will call OnTimer when complete
    - 'selfkey' is the ptKey of the PythonFile component
    - 'time' is how much time from now (in seconds) to call back
    - 'id' is an integer id that will be returned in the OnTimer call
    """
    ...

def PtAttachObject(child, parent, netForce=False):
    """Attach child to parent based on ptKey or ptSceneobject
    - childKey is the ptKey or ptSceneobject of the one being attached
    - parentKey is the ptKey or ptSceneobject of the one being attached to
    (both arguments must be ptKeys or ptSceneobjects, you cannot mix types)
    """
    ...

def PtAvatarEnterAFK():
    """Tells the local avatar to enter AwayFromKeyboard idle loop (netpropagated)"""
    ...

def PtAvatarEnterAnimMode(animName):
    """Enter a custom anim loop (netpropagated)"""
    ...

def PtAvatarEnterLookingAtKI():
    """Tells the local avatar to enter looking at KI idle loop (netpropagated)"""
    ...

def PtAvatarEnterUsePersBook():
    """Tells the local avatar to enter using their personal book idle loop (netpropagated)"""
    ...

def PtAvatarExitAFK():
    """Tells the local avatar to exit AwayFromKeyboard idle loop (netpropagated)"""
    ...

def PtAvatarExitLookingAtKI():
    """Tells the local avatar to exit looking at KI idle loop (netpropagated)"""
    ...

def PtAvatarExitUsePersBook():
    """Tells the local avatar to exit using their personal book idle loop (netpropagated)"""
    ...

def PtAvatarSitOnGround():
    """Tells the local avatar to sit on ground and enter sit idle loop (netpropagated)"""
    ...

def PtAvatarSpawnNext():
    """Send the avatar to the next spawn point"""
    ...

def PtCanShadowCast():
    """Can we cast shadows?"""
    ...

def PtChangeAvatar(gender):
    """Change the local avatar's gender (or clothing type)"""
    ...

def PtChangePassword(password):
    """Changes the current account's password"""
    ...

def PtChangePlayerName(name):
    """Change the local avatar's name"""
    ...

def PtCheckVisLOS(startPoint, endPoint):
    """Does LOS check from start to end"""
    ...

def PtCheckVisLOSFromCursor():
    """Does LOS check from where the mouse cursor is, into the screen"""
    ...

def PtClearCameraStack():
    """clears all cameras"""
    ...

def PtClearOfferBookMode():
    """Cancel the offer book interface"""
    ...

def PtClearPrivateChatList(memberKey):
    """Remove the local avatar from private vox messaging, and / or clear members from his chat list"""
    ...

def PtClearTimerCallbacks(key):
    """This will remove timer callbacks to the specified key"""
    ...

def PtCloneKey(key, loading=False):
    """Creates clone of key"""
    ...

def PtConsole(command):
    """This will execute 'command' as if it were typed into the Plasma console."""
    ...

def PtConsoleNet(command, netForce):
    """This will execute 'command' on the console, over the network, on all clients.
    If 'netForce' is true then force command to be sent over the network.
    """
    ...

def PtCreateDir(directory):
    """Creates the directory and all parent folders. Returns false on failure"""
    ...

def PtCreatePlayer(playerName, avatarShape, invitation):
    """Creates a new player"""
    ...

def PtCreatePublicAge(ageInfo):
    """Create a public instance of the given age."""
    ...

def PtDebugAssert(cond, msg):
    """Debug only: Assert if condition is false."""
    ...

def PtDebugPrint(*msgs, level=3, sep=" ", end="\n"):
    """Prints msgs to the Python log given the message's level, optionally separated and terminated by the given strings"""
    ...

def PtDeletePlayer(playerInt):
    """Deletes a player associated with the current account"""
    ...

def PtDetachObject(child, parent, netForce=False):
    """Detach child from parent based on ptKey or ptSceneobject
    - child is the ptKey or ptSceneobject of the one being detached
    - parent is the ptKey or ptSceneobject of the one being detached from
    (both arguments must be ptKeys or ptSceneobjects, you cannot mix types)
    """
    ...

def PtDirtySynchClients(selfKey, SDLStateName, flags):
    """DO NOT USE - handled by ptSDL"""
    ...

def PtDirtySynchState(selfKey, SDLStateName, flags):
    """DO NOT USE - handled by ptSDL"""
    ...

def PtDisableAvatarCursorFade():
    """Disable the avatar cursor fade"""
    ...

def PtDisableAvatarJump():
    """Disable the ability of the avatar to jump"""
    ...

def PtDisableControlKeyEvents(selfKey):
    """Disable the control key events from calling OnControlKeyEvent"""
    ...

def PtDisableForwardMovement():
    """Disable the ability of the avatar to move forward"""
    ...

def PtDisableMouseMovement():
    """Disable avatar mouse movement input"""
    ...

def PtDisableMovementKeys():
    """Disable avatar movement input"""
    ...

def PtDisableRenderScene():
    """UNKNOWN"""
    ...

def PtDisableShadows():
    """Turns shadows off"""
    ...

def PtDumpLogs(folder):
    """Dumps all current log files to the specified folder (a sub-folder to the log folder)"""
    ...

def PtEmoteAvatar(emote):
    """Play an emote on the local avatar (netpropagated)"""
    ...

def PtEnableAvatarCursorFade():
    """Enable the avatar cursor fade"""
    ...

def PtEnableAvatarJump():
    """Enable the ability of the avatar to jump"""
    ...

def PtEnableControlKeyEvents(selfKey):
    """Enable control key events to call OnControlKeyEvent(controlKey,activateFlag)"""
    ...

def PtEnableForwardMovement():
    """Enable the ability of the avatar to move forward"""
    ...

def PtEnableMouseMovement():
    """Enable avatar mouse movement input"""
    ...

def PtEnableMovementKeys():
    """Enable avatar movement input"""
    ...

def PtEnablePlanarReflections(on):
    """Enables/disables planar reflections"""
    ...

def PtEnableRenderScene():
    """UNKNOWN"""
    ...

def PtEnableShadows():
    """Turns shadows on"""
    ...

def PtExcludeRegionSet(senderKey, regionKey, state):
    """This will set the state of an exclude region
    - 'senderKey' is a ptKey of the PythonFile component
    - 'regionKey' is a ptKey of the exclude region
    - 'state' is either kExRegRelease or kExRegClear
    """
    ...

def PtExcludeRegionSetNow(senderKey, regionKey, state):
    """This will set the state of an exclude region immediately on the server
    - 'senderKey' is a ptKey of the PythonFile component
    - 'regionKey' is a ptKey of the exclude region
    - 'state' is either kExRegRelease or kExRegClear
    """
    ...

def PtFadeIn(lenTime, holdFlag, noSound=0):
    """Fades screen in for lenTime seconds"""
    ...

def PtFadeLocalAvatar(fade):
    """Fade (or unfade) the local avatar"""
    ...

def PtFadeOut(lenTime, holdFlag, noSound=0):
    """Fades screen out for lenTime seconds"""
    ...

def PtFakeLinkAvatarToObject(avatar, object):
    """Pseudo-links avatar to object within the same age
    """
    ...

def PtFileExists(filename):
    """Returns true if the specified file exists"""
    ...

def PtFindActivator(name):
    """This will try to find an activator based on its name
    - it will return a ptKey if found- it will return None if not found
    """
    ...

def PtFindClones(key):
    """Finds all clones"""
    ...

def PtFindImage(name: str) -> Iterable[ptImage]:
    """Find an already loaded image by name."""
    ...

def PtFindLayer(name: str, age: str = "", page: str = "") -> Optional[ptLayer]:
    """Find a layer by name."""
    ...

def PtFindSceneobject(name, ageName):
    """This will try to find a sceneobject based on its name and what age its in
    - it will return a ptSceneObject if found- if not found then a NameError exception will happen
    """
    ...

def PtFindSceneobjects(name):
    """This will try to find a any sceneobject containing string in name"""
    ...

def PtFirstPerson():
    """is the local avatar in first person mode"""
    ...

def PtFlashWindow():
    """Flashes the client window if it is not focused"""
    ...

def PtFogSetDefColor(color):
    """Sets default fog color"""
    ...

def PtFogSetDefExp(end, density):
    """Set exp fog values"""
    ...

def PtFogSetDefExp2(end, density):
    """Set exp2 fog values"""
    ...

def PtFogSetDefLinear(start, end, density):
    """Set linear fog values"""
    ...

def PtForceCursorHidden():
    """Forces the cursor to hide, overriding everything.
    Only call if other methods won't work. The only way to show the cursor after this call is PtForceMouseShown()
    """
    ...

def PtForceCursorShown():
    """Forces the cursor to show, overriding everything.
    Only call if other methods won't work. This is the only way to show the cursor after a call to PtForceMouseHidden()
    """
    ...

def PtForceVaultNodeUpdate(nodeId):
    """Forces a vault node to update"""
    ...

def PtGMTtoDniTime(gtime):
    """Converts GMT time (passed in) to D'Ni time"""
    ...

def PtGUICursorDimmed():
    """Dimms the GUI cursor"""
    ...

def PtGUICursorOff():
    """Turns the GUI cursor off"""
    ...

def PtGUICursorOn():
    """Turns the GUI cursor on"""
    ...

def PtGetAIAvatarsByModelName(modelName):
    """Returns a list of tuples representing the matching ai avatars"""
    ...

def PtGetAccountName():
    """Returns the account name for the current account"""
    ...

def PtGetAccountPlayerList():
    """Returns list of players associated with the current account"""
    ...

def PtGetAgeInfo():
    """Returns ptAgeInfoStruct of the current Age"""
    ...

def PtGetAgeName():
    """Returns filename of the current Age"""
    ...

def PtGetAgeSDL():
    """Returns the global ptSDL for the current Age"""
    ...

def PtGetAgeTimeOfDayPercent():
    """Returns the current age time of day as a percent (0 to 1)"""
    ...

def PtGetAvatarKeyFromClientID(clientID):
    """From an integer that is the clientID, find the avatar and return its ptKey"""
    ...

def PtGetCameraNumber(x):
    """Returns camera x's name from stack"""
    ...

def PtGetClientIDFromAvatarKey(avatarKey):
    """From a ptKey that points at an avatar, return the players clientID (integer)"""
    ...

def PtGetClientName(avatarKey=None):
    """This will return the name of the client that is owned by the avatar
    - avatarKey is the ptKey of the avatar to get the client name of.
    If avatarKey is omitted then the local avatar is used
    """
    ...

def PtGetControlEvents(on, key):
    """Registers or unregisters for control event messages"""
    ...

def PtGetDefaultDisplayParams():
    """Returns the default resolution and display settings"""
    ...

def PtGetDefaultSpawnPoint():
    """Returns the default spawnpoint definition (as a ptSpawnPointInfo)"""
    ...

def PtGetDesktopColorDepth():
    """Returns desktop ColorDepth"""
    ...

def PtGetDesktopHeight():
    """Returns desktop height"""
    ...

def PtGetDesktopWidth():
    """Returns desktop width"""
    ...

def PtGetDialogFromString(dialogName):
    """Get a ptGUIDialog from its name"""
    ...

def PtGetDialogFromTagID(tagID):
    """Returns the dialog associated with the tagID"""
    ...

def PtGetDniTime():
    """Returns current D'Ni time"""
    ...

def PtGetFrameDeltaTime():
    """Returns the amount of time that has elapsed since last frame."""
    ...

def PtGetGameTime():
    """Returns the system game time (frame based) in seconds."""
    ...

def PtGetInitPath():
    """Returns the path to the client's init directory."""
    ...

def PtGetLanguage():
    """Returns the current language as a PtLanguage enum"""
    ...

def PtGetLocalAvatar():
    """This will return a ptSceneobject of the local avatar
    - if there is no local avatar a NameError exception will happen.
    """
    ...

def PtGetLocalClientID():
    """Returns our local client ID number"""
    ...

def PtGetLocalKILevel():
    """returns local player's ki level"""
    ...

def PtGetLocalPlayer():
    """Returns a ptPlayer object of the local player"""
    ...

def PtGetLocalizedString(name, arguments=None):
    """Returns the localized string specified by name (format is Age.Set.Name) and substitutes the arguments in the list of strings passed in as arguments."""
    ...

def PtGetMouseTurnSensitivity():
    """Returns the sensitivity"""
    ...

def PtGetNPCByID(npcID):
    """This will return the NPC with a specific ID"""
    ...

def PtGetNPCCount():
    """Returns the number of NPCs in the current age"""
    ...

def PtGetNumCameras():
    """returns camera stack size"""
    ...

def PtGetNumParticles(key):
    """Key is the key of scene object host to particle system"""
    ...

def PtGetNumRemotePlayers():
    """Returns the number of remote players in this Age with you."""
    ...

def PtGetPlayerList():
    """Returns a list of ptPlayer objects of all the remote players"""
    ...

def PtGetPlayerListDistanceSorted():
    """Returns a list of ptPlayers, sorted by distance"""
    ...

def PtGetPrevAgeInfo():
    """Returns ptAgeInfoStruct of previous age visited"""
    ...

def PtGetPrevAgeName():
    """Returns filename of previous age visited"""
    ...

def PtGetPublicAgeList(ageName):
    """Get list of public ages for the given age name.
    The age list will be delivered asynchronously through the callback method gotPublicAgeList(self,ageList). ageList is a list of tuple(ptAgeInfoStruct,nPlayersInAge)
    """
    ...

def PtGetPythonLoggingLevel():
    """Returns the current level of python logging"""
    ...

def PtGetServerTime():
    """Returns the current time on the server (which is GMT)"""
    ...

def PtGetShadowVisDistance():
    """Returns the maximum shadow visibility distance"""
    ...

def PtGetSupportedDisplayModes():
    """Returns a list of supported resolutions"""
    ...

def PtGetTime():
    """Returns the number of seconds since the game was started."""
    ...

def PtGetUserPath():
    """Returns the path to the client's root user directory."""
    ...

def PtGuidGenerate():
    """Returns string representation for a new guid"""
    ...

def PtHideDialog(dialogName):
    """Hide a GUI dialog by name (does not unload dialog)"""
    ...

def PtIsActivePlayerSet():
    """Returns whether or not an active player is set"""
    ...

def PtIsCCRAway():
    """Returns current status of CCR dept"""
    ...

def PtIsClickToTurn():
    """Is click-to-turn on?"""
    ...

def PtIsCurrentBrainHuman():
    """Returns whether the local avatar current brain is the human brain"""
    ...

def PtIsDemoMode():
    """Returns whether the game is in Demo mode or not"""
    ...

def PtIsDialogLoaded(dialogName):
    """Test to see if a GUI dialog is loaded, by name"""
    ...

def PtIsEnterChatModeKeyBound():
    """Returns whether the EnterChatMode is bound to a key"""
    ...

def PtIsGUIModal():
    """Returns true if the GUI is displaying a modal dialog and blocking input"""
    ...

def PtIsInternalRelease():
    """Returns whether the client is an internal build or not"""
    ...

def PtIsMouseInverted():
    """Is the mouse currently inverted?"""
    ...

def PtIsShadowsEnabled():
    """Returns whether shadows are currently turned on"""
    ...

def PtIsSinglePlayerMode():
    """Returns whether the game is in single player mode or not"""
    ...

def PtIsSolo() -> bool:
    """Returns whether we are the only player in the Age"""
    ...

def PtKillParticles(timeRemaining, pctToKill, particleSystem):
    """Tells particleSystem to kill pctToKill percent of its particles"""
    ...

def PtLimitAvatarLOD(LODlimit):
    """Sets avatar's LOD limit"""
    ...

def PtLoadAvatarModel(modelName, spawnPoint, userStr = ""):
    """Loads an avatar model at the given spawn point. Assigns the user specified string to it."""
    ...

def PtLoadBookGUI(guiName):
    """Loads the gui specified, a gui must be loaded before it can be used. If the gui is already loaded, doesn't do anything"""
    ...

def PtLoadDialog(dialogName, selfKey=None, ageName=""):
    """Loads a GUI dialog by name and optionally set the Notify proc key
    If the dialog is already loaded then it won't load it again
    """
    ...

def PtLoadJPEGFromDisk(filename, width, height):
    """The image will be resized to fit the width and height arguments. Set to 0 if resizing is not desired.
    Returns a pyImage of the specified file.
    """
    ...

def PtLoadPNGFromDisk(filename, width, height):
    """The image will be resized to fit the width and height arguments. Set to 0 if resizing is not desired.
    Returns a pyImage of the specified file.
    """
    ...

def PtLocalAvatarIsMoving():
    """Returns true if the local avatar is moving (a movement key is held down)"""
    ...

def PtLocalAvatarRunKeyDown():
    """Returns true if the run key is being held down for the local avatar"""
    ...

def PtLocalizedYesNoDialog(cb: Union[None, Callable, ptKey], path: str, *args, dialogType: int = PtConfirmationType.YesNo) -> None:
    """This will display a confirmation dialog to the user with the localized text `path` with any optional localization `args` applied. This dialog _has_ to be answered by the user, and their answer will be returned in a Notify message or callback given by `cb`."""
    ...

def PtMaxListenDistSq():
    """Returns the maximum distance (squared) of the listen range"""
    ...

def PtMaxListenListSize():
    """Returns the maximum listen number of players"""
    ...

def PtNotifyOffererLinkAccepted(offerer):
    """Tell the offerer that we accepted the link offer"""
    ...

def PtNotifyOffererLinkCompleted(offerer):
    """Tell the offerer that we completed the link"""
    ...

def PtNotifyOffererLinkRejected(offerer):
    """Tell the offerer that we rejected the link offer"""
    ...

def PtPageInNode(nodeName, netForce=False, ageName=""):
    """Pages in node, or a list of nodes"""
    ...

def PtPageOutNode(nodeName, netForce=False):
    """Pages out a node"""
    ...

def PtRateIt(chronicleName, dialogPrompt, onceFlag):
    """Shows a dialog with dialogPrompt and stores user input rating into chronicleName"""
    ...

def PtRebuildCameraStack(name, ageName):
    """Push camera with this name on the stack"""
    ...

def PtRecenterCamera():
    """re-centers the camera"""
    ...

def PtRemovePublicAge(ageInstanceGuid):
    """Remove a public instance of the given age."""
    ...

def PtRequestLOSScreen(selfKey, ID, xPos, yPos, distance, what, reportType):
    """Request a LOS check from a point on the screen"""
    ...

def PtSaveScreenShot(fileName, width=640, height=480, quality=75):
    """Takes a screenshot with the specified filename, size, and quality"""
    ...

def PtSendChatToCCR(message, CCRPlayerID):
    """Sends a chat message to a CCR that has contacted this player"""
    ...

def PtSendFriendInvite(emailAddress, toName = "Friend"):
    """Sends an email with invite code"""
    ...

def PtSendKIGZMarkerMsg(markerNumber, sender):
    """Same as PtSendKIMessageInt except 'sender' could get a notify message back
    """
    ...

def PtSendKIMessage(command, value):
    """Sends a command message to the KI frontend.
    See PlasmaKITypes.py for list of commands
    """
    ...

def PtSendKIMessageInt(command, value):
    """Same as PtSendKIMessage except the value is guaranteed to be a uint32_t
    (for things like player IDs)
    """
    ...

def PtSendKIRegisterImagerMsg(imagerName, sender):
    """Sends a message to the KI to register the specified imager"""
    ...

def PtSendPetitionToCCR(message, reason=0, title=""):
    """Sends a petition with a message to the CCR group"""
    ...

def PtSendPrivateChatList(chatList):
    """Lock the local avatar into private vox messaging, and / or add new members to his chat list"""
    ...

def PtSendRTChat(fromPlayer, toPlayerList, message, flags):
    """Sends a realtime chat message to the list of ptPlayers
    If toPlayerList is an empty list, it is a broadcast message
    """
    ...

def PtSetActivePlayer(playerInt):
    """Sets the active player associated with the current account"""
    ...

def PtSetAlarm(secs, cbObject, cbContext):
    """secs is the amount of time before your alarm goes off.
    cbObject is a python object with the method onAlarm(int context)
    cbContext is an integer.
    """
    ...

def PtSetBehaviorLoopCount(behaviorKey, stage, loopCount, netForce):
    """This will set the loop count for a particular stage in a multistage behavior"""
    ...

def PtSetBehaviorNetFlags(behKey, netForce, netProp):
    """Sets net flags on the associated behavior"""
    ...

def PtSetClearColor(red, green, blue):
    """Set the clear color"""
    ...

def PtSetClickToTurn(state):
    """Turns on click-to-turn"""
    ...

def PtSetGamma2(gamma):
    """Set the gamma with gamma2 rules"""
    ...

def PtSetGlobalClickability(enable):
    """Enable or disable all clickables on the local client"""
    ...

def PtSetGraphicsOptions(width, height, colordepth, windowed, numAAsamples, numAnisoSamples, VSync):
    """Set the graphics options"""
    ...

def PtSetLightAnimStart(key, name, start):
    """ Key is the key of scene object host to light, start is a bool. Name is the name of the light to manipulate"""
    ...

def PtSetLightValue(key, name, r, g, b, a):
    """ Key is the key of scene object host to light. Name is the name of the light to manipulate"""
    ...

def PtSetMouseInverted():
    """Inverts the mouse"""
    ...

def PtSetMouseTurnSensitivity(sensitivity):
    """Set the mouse sensitivity"""
    ...

def PtSetMouseUninverted():
    """Uninverts the mouse"""
    ...

def PtSetOfferBookMode(selfkey, ageFilename, ageInstanceName):
    """Put us into the offer book interface"""
    ...

def PtSetParticleDissentPoint(x, y, z, particlesys):
    """Sets the dissent point of the particlesys to x,y,z"""
    ...

def PtSetParticleOffset(x, y, z, particlesys):
    """Sets the particlesys particle system's offset"""
    ...

def PtSetPythonLoggingLevel(level):
    """Sets the current level of python logging"""
    ...

def PtSetShadowVisDistance(distance):
    """Set the maximum shadow visibility distance"""
    ...

def PtSetShareAgeInstanceGuid(instanceGuid):
    """This sets the desired age instance guid for the receiver to link to"""
    ...

def PtSetShareSpawnPoint(spawnPoint):
    """This sets the desired spawn point for the receiver to link to"""
    ...

def PtShootBulletFromObject(selfkey, gunObj, radius, range):
    """Shoots a bullet from an object"""
    ...

def PtShootBulletFromScreen(selfkey, xPos, yPos, radius, range):
    """Shoots a bullet from a position on the screen"""
    ...

def PtShowDialog(dialogName):
    """Show a GUI dialog by name (does not load dialog)"""
    ...

def PtStartScreenCapture(selfKey, width=800, height=600):
    """Starts a capture of the screen"""
    ...

def PtSupportsPlanarReflections() -> bool:
    """Returns if planar reflections are supported"""
    ...

def PtToggleAvatarClickability(on):
    """Turns on and off our avatar's clickability"""
    ...

def PtTransferParticlesToObject(objFrom, objTo, num):
    """Transfers num particles from objFrom to objTo"""
    ...

def PtUnLoadAvatarModel(avatarKey):
    """Forcibly unloads the specified avatar model.
    Do not use this method unless you require fine-grained control of avatar unloading.
    """
    ...

def PtUnloadAllBookGUIs():
    """Unloads all loaded guis except for the default one"""
    ...

def PtUnloadBookGUI(guiName):
    """Unloads the gui specified. If the gui isn't loaded, doesn't do anything"""
    ...

def PtUnloadDialog(dialogName):
    """This will unload the GUI dialog by name. If not loaded then nothing will happen"""
    ...

def PtValidateKey(key):
    """Returns true(1) if 'key' is valid and loaded,
    otherwise returns false(0)
    """
    ...

def PtVaultDownload(nodeId):
    """Downloads the vault tree of the given nodeid"""
    ...

def PtWasLocallyNotified(selfKey):
    """Returns 1 if the last notify was local or 0 if the notify originated on the network"""
    ...

def PtWearDefaultClothing(key, broadcast=False):
    """Forces the avatar to wear the default clothing set"""
    ...

def PtWearDefaultClothingType(key, type, broadcast=False):
    """Forces the avatar to wear the default clothing of the specified type"""
    ...

def PtWearMaintainerSuit(key, wearOrNot):
    """Wears or removes the maintainer suit of clothes"""
    ...

def PtWhatGUIControlType(guiKey):
    """Returns the control type of the key passed in"""
    ...

def PtYesNoDialog(cb: Union[None, ptKey, Callable], message: str, /, dialogType: int = PtConfirmationType.YesNo) -> None:
    """This will display a confirmation dialog to the user with the text `message`. This dialog _has_ to be answered by the user, and their answer will be returned in a Notify message or callback given by `cb`."""
    ...

class ptAgeInfoStruct:
    """Class to hold AgeInfo struct data"""

    def copyFrom(self, other):
        """Copies data from one ptAgeInfoStruct or ptAgeInfoStructRef to this one"""
        ...

    def getAgeDescription(self):
        """Gets the description part of the Age name"""
        ...

    def getAgeFilename(self):
        """Gets the Age's filename"""
        ...

    def getAgeInstanceGuid(self):
        """Get the Age's instance GUID"""
        ...

    def getAgeInstanceName(self):
        """Get the instance name of the Age"""
        ...

    def getAgeLanguage(self):
        """Gets the age's language (integer)"""
        ...

    def getAgeSequenceNumber(self):
        """Gets the unique sequence number"""
        ...

    def getAgeUserDefinedName(self):
        """Gets the user defined part of the Age name"""
        ...

    def getDisplayName(self):
        """Returns a string that is the displayable name of the age instance"""
        ...

    def setAgeDescription(self, udName):
        """Sets the description part of the Age"""
        ...

    def setAgeFilename(self, filename):
        """Sets the filename of the Age"""
        ...

    def setAgeInstanceGuid(self, guid):
        """Sets the Age instance's GUID"""
        ...

    def setAgeInstanceName(self, instanceName):
        """Sets the instance name of the Age"""
        ...

    def setAgeLanguage(self, lang):
        """Sets the age's language (integer)"""
        ...

    def setAgeSequenceNumber(self, seqNumber):
        """Sets the unique sequence number"""
        ...

    def setAgeUserDefinedName(self, udName):
        """Sets the user defined part of the Age"""
        ...

class ptAgeInfoStructRef:
    """Class to hold AgeInfo struct data"""

    def copyFrom(self, other):
        """Copies data from one ptAgeInfoStruct or ptAgeInfoStructRef to this one"""
        ...

    def getAgeFilename(self):
        """Gets the Age's filename"""
        ...

    def getAgeInstanceGuid(self):
        """Get the Age's instance GUID"""
        ...

    def getAgeInstanceName(self):
        """Get the instance name of the Age"""
        ...

    def getAgeSequenceNumber(self):
        """Gets the unique sequence number"""
        ...

    def getAgeUserDefinedName(self):
        """Gets the user defined part of the Age name"""
        ...

    def getDisplayName(self):
        """Returns a string that is the displayable name of the age instance"""
        ...

    def setAgeFilename(self, filename):
        """Sets the filename of the Age"""
        ...

    def setAgeInstanceGuid(self, guid):
        """Sets the Age instance's GUID"""
        ...

    def setAgeInstanceName(self, instanceName):
        """Sets the instance name of the Age"""
        ...

    def setAgeSequenceNumber(self, seqNumber):
        """Sets the unique sequence number"""
        ...

    def setAgeUserDefinedName(self, udName):
        """Sets the user defined part of the Age"""
        ...

class ptAgeLinkStruct:
    """Class to hold the data of the AgeLink structure"""

    def copyFrom(self, other):
        """Copies data from one ptAgeLinkStruct or ptAgeLinkStructRef to this one"""
        ...

    def getAgeInfo(self):
        """Returns a ptAgeInfoStructRef of the AgeInfo for this link"""
        ...

    def getLinkingRules(self):
        """Returns the linking rules of this link"""
        ...

    def getParentAgeFilename(self):
        """Returns a string of the parent age filename"""
        ...

    def getSpawnPoint(self):
        """Gets the spawn point ptSpawnPointInfoRef of this link"""
        ...

    def setAgeInfo(self, ageInfo):
        """Sets the AgeInfoStruct from the data in ageInfo (a ptAgeInfoStruct)"""
        ...

    def setLinkingRules(self, rule):
        """Sets the linking rules for this link"""
        ...

    def setParentAgeFilename(self, filename):
        """Sets the parent age filename for child age links"""
        ...

    def setSpawnPoint(self, spawnPtInfo):
        """Sets the spawn point of this link (a ptSpawnPointInfo or ptSpawnPointInfoRef)"""
        ...

class ptAgeLinkStructRef:
    """Class to hold the data of the AgeLink structure"""

    def copyFrom(self, other):
        """Copies data from one ptAgeLinkStruct or ptAgeLinkStructRef to this one"""
        ...

    def getAgeInfo(self):
        """Returns a ptAgeInfoStructRef of the AgeInfo for this link"""
        ...

    def getLinkingRules(self):
        """Returns the linking rules of this link"""
        ...

    def getSpawnPoint(self):
        """Gets the spawn point ptSpawnPointInfoRef of this link"""
        ...

    def setAgeInfo(self, ageInfo):
        """Sets the AgeInfoStruct from the data in ageInfo (a ptAgeInfoStruct)"""
        ...

    def setLinkingRules(self, rule):
        """Sets the linking rules for this link"""
        ...

    def setSpawnPoint(self, spawnPtInfo):
        """Sets the spawn point of this link (a ptSpawnPointInfo or ptSpawnPointInfoRef)"""
        ...

class ptAgeVault:
    """Accessor class to the Age's vault"""

    def addChronicleEntry(self, name, type, value):
        """Adds a chronicle entry with the specified type and value"""
        ...

    def addDevice(self, deviceName, cb=None, cbContext=0):
        """Adds a device to the age"""
        ...

    def findChronicleEntry(self, entryName):
        """Returns the named ptVaultChronicleNode"""
        ...

    def getAgeDevicesFolder(self):
        """Returns a ptVaultFolderNode of the inboxes for the devices in this Age."""
        ...

    def getAgeGuid(self):
        """Returns the current Age's guid as a string."""
        ...

    def getAgeInfo(self):
        """Returns a ptVaultAgeInfoNode of the this Age"""
        ...

    def getAgeSDL(self):
        """Returns the age's SDL (ptSDLStateDataRecord)"""
        ...

    def getBookshelfFolder(self):
        """Personal age only: Returns a ptVaultFolderNode that contains the owning player's AgesIOwn age list"""
        ...

    def getChronicleFolder(self):
        """Returns a ptVaultFolderNode"""
        ...

    def getDevice(self, deviceName):
        """Returns the specified device (ptVaultTextNoteNode)"""
        ...

    def getDeviceInbox(self, deviceName):
        """Returns a ptVaultFolderNode of the inbox for the named device in this age."""
        ...

    def getPeopleIKnowAboutFolder(self):
        """Returns a ptVaultPlayerInfoListNode of the players the Age knows about(?)."""
        ...

    def getSubAgeLink(self, ageInfo):
        """Returns a ptVaultAgeLinkNode to 'ageInfo' (a ptAgeInfoStruct) for this Age."""
        ...

    def getSubAgesFolder(self):
        """Returns a ptVaultFolderNode of sub Age's folder."""
        ...

    def hasDevice(self, deviceName):
        """Does a device with this name exist?"""
        ...

    def removeDevice(self, deviceName):
        """Removes a device from the age"""
        ...

    def setDeviceInbox(self, deviceName, inboxName, cb=None, cbContext=0):
        """Set's the device's inbox"""
        ...

    def updateAgeSDL(self, pyrec):
        """Updates the age's SDL"""
        ...

class ptAnimation:
    """Plasma animation class"""

    def __init__(self, key=None):
        ...

    def addKey(self, key):
        """Adds an animation modifier to the list of receiver keys"""
        ...

    def backwards(self, backwardsFlag):
        """Turn on and off playing the animation backwards"""
        ...

    def getFirstKey(self):
        """This will return a ptKey object that is the first receiver (target)
        However, if the parent is not a modifier or not loaded, then None is returned.
        """
        ...

    def incrementBackward(self):
        """Step the animation backward a frame"""
        ...

    def incrementForward(self):
        """Step the animation forward a frame"""
        ...

    def looped(self, loopedFlag):
        """Turn on and off looping of the animation"""
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

    def play(self):
        """Plays the animation"""
        ...

    def playRange(self, start, end):
        """Play the animation from start to end"""
        ...

    def playToPercentage(self, zeroToOne):
        """Play the animation to the specified percentage (0 to 1)"""
        ...

    def playToTime(self, time):
        """Play the animation to the specified time"""
        ...

    def resume(self):
        """Resumes the animation from where it was stopped last"""
        ...

    def sender(self, selfKey):
        """Sets the sender of the messages being sent to the animation modifier"""
        ...

    def setAnimName(self, name):
        """Sets the animation notetrack name (or (Entire Animation))"""
        ...

    def setLoopEnd(self, loopEnd):
        """Sets the loop ending position
        - 'loopEnd' is the number of seconds from the absolute beginning of the animation
        """
        ...

    def setLoopStart(self, loopStart):
        """Sets the loop starting position
        - 'loopStart' is the number of seconds from the absolute beginning of the animation
        """
        ...

    def skipToBegin(self):
        """Skip to the beginning of the animation (don't play)"""
        ...

    def skipToEnd(self):
        """Skip to the end of the animation (don't play)"""
        ...

    def skipToLoopBegin(self):
        """Skip to the beginning of the animation loop (don't play)"""
        ...

    def skipToLoopEnd(self):
        """Skip to the end of the animation loop (don't play)"""
        ...

    def skipToTime(self, time):
        """Skip the animation to time (don't play)"""
        ...

    def speed(self, speed):
        """Sets the animation playback speed"""
        ...

    def stop(self):
        """Stops the animation"""
        ...

class ptAudioControl:
    """Accessor class to the Audio controls"""

    def areSubtitlesEnabled(self):
        """Are subtitles for the audio enabled? Returns 1 if true otherwise returns 0."""
        ...

    def canSetMicLevel(self):
        """Can the microphone level be set? Returns 1 if true otherwise returns 0."""
        ...

    def disable(self):
        """Disabled audio"""
        ...

    def disableSubtitles(self):
        """Disables subtitles for audio."""
        ...

    def enable(self):
        """Enables audio"""
        ...

    def enableSubtitles(self):
        """Enables subtitles for audio."""
        ...

    def enableVoiceChat(self, state):
        """Enables or disables voice chat."""
        ...

    def enableVoiceRecording(self, state):
        """Enables or disables voice recording."""
        ...

    def getAmbienceVolume(self):
        """Returns the volume (0.0 to 1.0) for the Ambiance."""
        ...

    def getCaptureDevice(self):
        """Gets the name for the capture device being used by the audio system."""
        ...

    def getCaptureDevices(self):
        """Gets the name of all available audio capture devices."""
        ...

    def getFriendlyDeviceName(self, devicename):
        """Returns the provided device name without any OpenAL prefixes applied."""
        ...

    def getGUIVolume(self):
        """Returns the volume (0.0 to 1.0) for the GUI dialogs."""
        ...

    def getMicLevel(self):
        """Returns the microphone recording level (0.0 to 1.0)."""
        ...

    def getMusicVolume(self):
        """Returns the volume (0.0 to 1.0) for the Music."""
        ...

    def getNPCVoiceVolume(self):
        """Returns the volume (0.0 to 1.0) for the NPC's voice."""
        ...

    def getPlaybackDevice(self):
        """Gets the name for the device being used by the audio system."""
        ...

    def getPlaybackDevices(self):
        """Gets the names of all available audio playback devices."""
        ...

    def getPriorityCutoff(self):
        """Returns current sound priority"""
        ...

    def getSoundFXVolume(self):
        """Returns the volume (0.0 to 1.0) for the Sound FX."""
        ...

    def getVoiceVolume(self):
        """Returns the volume (0.0 to 1.0) for the Voices."""
        ...

    def hideIcons(self):
        """Hides (disables) the voice recording icons."""
        ...

    def isEAXSupported(self):
        """Returns true or false based on whether or not a the device specified supports EAX"""
        ...

    def isEnabled(self):
        """Is the audio enabled? Returns 1 if true otherwise returns 0."""
        ...

    def isMuted(self):
        """Are all sounds muted? Returns 1 if true otherwise returns 0."""
        ...

    def isUsingEAXAcceleration(self):
        """Is EAX sound acceleration enabled? Returns 1 if true otherwise returns 0."""
        ...

    def isVoiceRecordingEnabled(self):
        """Is voice recording enabled? Returns 1 if true otherwise returns 0."""
        ...

    def muteAll(self):
        """Mutes all sounds."""
        ...

    def pushToTalk(self, state):
        """Enables or disables 'push-to-talk'."""
        ...

    def setAmbienceVolume(self, volume):
        """Sets the Ambience volume (0.0 to 1.0) for the game.
        This only sets the volume for this game session.
        """
        ...

    def setCaptureDevice(self, devicename):
        """Sets the audio capture device by name."""
        ...

    def setGUIVolume(self, volume):
        """Sets the GUI dialog volume (0.0 to 1.0) for the game.
        This only sets the volume for this game session.
        """
        ...

    def setLoadOnDemand(self, state):
        """Enables or disables the load on demand for sounds."""
        ...

    def setMicLevel(self, level):
        """Sets the microphone recording level (0.0 to 1.0)."""
        ...

    def setMusicVolume(self, volume):
        """Sets the Music volume (0.0 to 1.0) for the game.
        This only sets the volume for this game session.
        """
        ...

    def setNPCVoiceVolume(self, volume):
        """Sets the NPC's voice volume (0.0 to 1.0) for the game.
        This only sets the volume for this game session.
        """
        ...

    def setPlaybackDevice(self, devicename, restart):
        """Sets audio system output device by name, and optionally restarts it"""
        ...

    def setPriorityCutoff(self, priority):
        """Sets the sound priority"""
        ...

    def setSoundFXVolume(self, volume):
        """Sets the SoundFX volume (0.0 to 1.0) for the game.
        This only sets the volume for this game session.
        """
        ...

    def setTwoStageLOD(self, state):
        """Enables or disables two-stage LOD, where sounds can be loaded into RAM but not into sound buffers.
        ...Less of a performance hit, harder on memory.
        """
        ...

    def setVoiceVolume(self, volume):
        """Sets the Voice volume (0.0 to 1.0) for the game.
        This only sets the volume for this game session.
        """
        ...

    def showIcons(self):
        """Shows (enables) the voice recording icons."""
        ...

    def squelchLevel(self, level):
        """Sets the squelch level."""
        ...

    def unmuteAll(self):
        """Unmutes all sounds."""
        ...

    def useEAXAcceleration(self, state):
        """Enables or disables EAX sound acceleration (requires hardware acceleration)."""
        ...

class ptAvatar:
    """Plasma avatar class"""

    def addWardrobeClothingItem(self, clothing_name, tint1, tint2):
        """To add a clothing item to the avatar's wardrobe (closet)"""
        ...

    def enterSubWorld(self, sceneobject):
        """Places the avatar into the subworld of the ptSceneObject specified"""
        ...

    def exitSubWorld(self):
        """Exits the avatar from the subWorld where it was"""
        ...

    def findBone(self, bone_name: str) -> ptSceneObject:
        """Find the ptSceneObject for the requested bone"""
        ...

    def getAllWithSameMesh(self, clothing_name):
        """Returns a lilst of all clothing items that use the same mesh as the specified one"""
        ...

    def getAvatarClothingGroup(self):
        """Returns what clothing group the avatar belongs to.
        It is also a means to determine if avatar is male or female
        """
        ...

    def getAvatarClothingList(self):
        """Returns a list of clothes that the avatar is currently wearing."""
        ...

    def getClosetClothingList(self, clothing_type):
        """Returns a list of clothes for the avatar that are in specified clothing group."""
        ...

    def getCurrentMode(self):
        """Returns current brain mode for avatar"""
        ...

    def getEntireClothingList(self, clothing_type):
        """Gets the entire list of clothing available. 'clothing_type' not used
        NOTE: should use getClosetClothingList
        """
        ...

    def getMatchingClothingItem(self, clothingName):
        """Finds the matching clothing item that goes with 'clothingName'
        Used to find matching left and right gloves and shoes.
        """
        ...

    def getMorph(self, clothing_name, layer):
        """Get the current morph value"""
        ...

    def getSkinBlend(self, layer):
        """Get the current skin blend value"""
        ...

    def getTintClothingItem(self, clothing_name, layer=1):
        """Returns a ptColor of a particular item of clothing that the avatar is wearing.
        The color will be a ptColor object.
        """
        ...

    def getTintSkin(self):
        """Returns a ptColor of the current skin tint for the avatar"""
        ...

    def getUniqueMeshList(self, clothing_type):
        """Returns a list of unique clothing items of the desired type (different meshes)"""
        ...

    def getWardrobeClothingList(self):
        """Return a list of items that are in the avatars closet"""
        ...

    def gotoStage(self, behaviorKey, stage, transitionTime, setTimeFlag, newTime, SetDirectionFlag, isForward, netForce):
        """Tells a multistage behavior to go to a particular stage"""
        ...

    def loadClothingFromFile(self, filename):
        """Load avatar clothing from a file"""
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

    def nextStage(self, behaviorKey, transitionTime, setTimeFlag, newTime, SetDirectionFlag, isForward, netForce):
        """Tells a multistage behavior to go to the next stage (Why does Matt like so many parameters?)"""
        ...

    def oneShot(self, seekKey, duration, usePhysicsFlag, animationName, drivableFlag, reversibleFlag):
        """Plays a one-shot animation on the avatar"""
        ...

    def playSimpleAnimation(self, animName):
        """Play simple animation on avatar"""
        ...

    def previousStage(self, behaviorKey, transitionTime, setTimeFlag, newTime, SetDirectionFlag, isForward, netForce):
        """Tells a multistage behavior to go to the previous stage"""
        ...

    def registerForBehaviorNotify(self, selfKey):
        """This will register for behavior notifies from the avatar"""
        ...

    def removeClothingItem(self, clothing_name, update=1):
        """Tells the avatar to remove a particular item of clothing."""
        ...

    def runBehavior(self, behaviorKey, netForceFlag):
        """Runs a behavior on the avatar. Can be a single or multi-stage behavior."""
        ...

    def runBehaviorSetNotify(self, behaviorKey, replyKey, netForceFlag):
        """Same as runBehavior, except send notifications to specified keyed object"""
        ...

    def runCoopAnim(self, targetKey, activeAvatarAnim, targetAvatarAnim, range=6, dist=3, move=1):
        """Seek near another avatar and run animations on both."""
        ...

    def saveClothing(self):
        """Saves the current clothing options (including morphs) to the vault"""
        ...

    def saveClothingToFile(self, filename):
        """Save avatar clothing to a file"""
        ...

    def setDontPanicLink(self, value: bool) -> None:
        """Disables panic linking to Personal Age (warps the avatar back to the start instead)"""
        ...

    def setMorph(self, clothing_name, layer, value):
        """Set the morph value (clipped between -1 and 1)"""
        ...

    def setReplyKey(self, key):
        """Sets the sender's key"""
        ...

    def setSkinBlend(self, layer, value):
        """Set the skin blend (value between 0 and 1)"""
        ...

    def tintClothingItem(self, clothing_name, tint, update=1):
        """Tells the avatar to tint(color) a particular item of clothing that they are already wearing.
        'tint' is a ptColor object
        """
        ...

    def tintClothingItemLayer(self, clothing_name, tint, layer, update=1):
        """Tells the avatar to tint(color) a particular layer of a particular item of clothing."""
        ...

    def tintSkin(self, tint, update=1):
        """Tints all of the skin on the avatar, with the ptColor tint"""
        ...

    def unRegisterForBehaviorNotify(self, selfKey):
        """This will unregister behavior notifications"""
        ...

    def wearClothingItem(self, clothing_name, update=1):
        """Tells the avatar to wear a particular item of clothing.
        And optionally hold update until later (for applying tinting before wearing).
        """
        ...

class ptBook:
    """Creates a new book"""

    def __init__(self, esHTMLSource, coverImage=None, callbackKey=None, guiName=''):
        ...

    def allowPageTurning(self, allow):
        """Turns on and off the ability to flip the pages in a book"""
        ...

    def close(self):
        """Closes the book"""
        ...

    def closeAndHide(self):
        """Closes the book and hides it once it finishes animating"""
        ...

    def getCurrentPage(self):
        """Returns the currently shown page"""
        ...

    def getEditableText(self):
        """Returns the editable text currently contained in the book."""
        ...

    def getMovie(self, index):
        """Grabs a ptAnimation object representing the movie indexed by index. The index is the index of the movie in the source code"""
        ...

    def goToPage(self, page):
        """Flips the book to the specified page"""
        ...

    def hide(self):
        """Hides the book"""
        ...

    def nextPage(self):
        """Flips the book to the next page"""
        ...

    def open(self, startingPage):
        """Opens the book to the specified page"""
        ...

    def previousPage(self):
        """Flips the book to the previous page"""
        ...

    def setEditable(self, editable):
        """Turn book editing on or off. If the book GUI does not support editing, nothing will happen"""
        ...

    def setEditableText(self, text):
        """Sets the book's editable text."""
        ...

    def setGUI(self, guiName):
        """Sets the gui to be used by the book, if the requested gui is not loaded, it will use the default
        Do not call while the book is open!
        """
        ...

    def setPageMargin(self, margin):
        """Sets the text margin for the book"""
        ...

    def setSize(self, width, height):
        """Sets the size of the book (width and height are floats from 0 to 1)"""
        ...

    def show(self, startOpened):
        """Shows the book closed, or open if the the startOpened flag is true"""
        ...

class ptCamera:
    """Plasma camera class"""

    def controlKey(self, controlKey, activateFlag):
        """Send a control key to the camera as if it was hit by the user.
        This is for sending things like pan-up, pan-down, zoom-in, etc.
        """
        ...

    def disableFirstPersonOverride(self):
        """Does _not_ allow the user to override the camera to go to first person camera."""
        ...

    def enableFirstPersonOverride(self):
        """Allows the user to override the camera and go to a first person camera."""
        ...

    def getAspectRatio(self):
        """Get the global aspect ratio"""
        ...

    def getFOV(self):
        """Returns the current camera's FOV(h)"""
        ...

    def isSmootherCam(self):
        """Returns true if we are using the faster cams thing"""
        ...

    def isStayInFirstPerson(self):
        """Are we staying in first person?"""
        ...

    def isWalkAndVerticalPan(self):
        """Returns true if we are walking and chewing gum"""
        ...

    def refreshFOV(self):
        """Refreshes the FOV"""
        ...

    def restore(self, cameraKey):
        """Restores camera to saved one"""
        ...

    def save(self, cameraKey):
        """Saves the current camera and sets the camera to cameraKey"""
        ...

    def set(self, cameraKey, time, save):
        """DO NOT USE"""
        ...

    def setAspectRatio(self, aspect):
        """Set the global aspect ratio"""
        ...

    def setFOV(self, fov, time):
        """Sets the current cameras FOV (based on h)"""
        ...

    def setSmootherCam(self, state):
        """Set the faster cams thing"""
        ...

    def setStayInFirstPerson(self, state):
        """Set Stay In First Person Always"""
        ...

    def setWalkAndVerticalPan(self, state):
        """Set Walk and chew gum"""
        ...

    def undoFirstPerson(self):
        """If the user has overridden the camera to be in first person, this will take them out of first person.
        If the user didn't override the camera, then this will do nothing.
        """
        ...

class ptCluster:
    """Creates a new ptCluster"""

    def __init__(self, key):
        ...

    def setVisible(self, visible):
        """Shows or hides the cluster object"""
        ...

class ptColor:
    """Plasma color class"""

    def __init__(self, red=0, green=0, blue=0, alpha=0):
        ...

    def black(self):
        """Sets the color to be black
        Example: black = ptColor().black()
        """
        ...

    def blue(self):
        """Sets the color to be blue
        Example: blue = ptColor().blue()
        """
        ...

    def brown(self):
        """Sets the color to be brown
        Example: brown = ptColor().brown()
        """
        ...

    def cyan(self):
        """Sets the color to be cyan
        Example: cyan = ptColor.cyan()
        """
        ...

    def darkbrown(self):
        """Sets the color to be darkbrown
        Example: darkbrown = ptColor().darkbrown()
        """
        ...

    def darkgreen(self):
        """Sets the color to be darkgreen
        Example: darkgreen = ptColor().darkgreen()
        """
        ...

    def darkpurple(self):
        """Sets the color to be darkpurple
        Example: darkpurple = ptColor().darkpurple()
        """
        ...

    def getAlpha(self):
        """Get the alpha blend component of the color"""
        ...

    def getBlue(self):
        """Get the blue component of the color"""
        ...

    def getGreen(self):
        """Get the green component of the color"""
        ...

    def getRed(self):
        """Get the red component of the color"""
        ...

    def gray(self):
        """Sets the color to be gray
        Example: gray = ptColor().gray()
        """
        ...

    def green(self):
        """Sets the color to be green
        Example: green = ptColor().green()
        """
        ...

    def magenta(self):
        """Sets the color to be magenta
        Example: magenta = ptColor().magenta()
        """
        ...

    def maroon(self):
        """Sets the color to be maroon
        Example: maroon = ptColor().maroon()
        """
        ...

    def navyblue(self):
        """Sets the color to be navyblue
        Example: navyblue = ptColor().navyblue()
        """
        ...

    def orange(self):
        """Sets the color to be orange
        Example: orange = ptColor().orange()
        """
        ...

    def pink(self):
        """Sets the color to be pink
        Example: pink = ptColor().pink()
        """
        ...

    def red(self):
        """Sets the color to be red
        Example: red = ptColor().red()
        """
        ...

    def setAlpha(self, alpha):
        """Set the alpha blend component of the color. 0.0 to 1.0"""
        ...

    def setBlue(self, blue):
        """Set the blue component of the color. 0.0 to 1.0"""
        ...

    def setGreen(self, green):
        """Set the green component of the color. 0.0 to 1.0"""
        ...

    def setRed(self, red):
        """Set the red component of the color. 0.0 to 1.0"""
        ...

    def slateblue(self):
        """Sets the color to be slateblue
        Example: slateblue = ptColor().slateblue()
        """
        ...

    def steelblue(self):
        """Sets the color to be steelblue
        Example: steelblue = ptColor().steelblue()
        """
        ...

    def tan(self):
        """Sets the color to be tan
        Example: tan = ptColor().tan()
        """
        ...

    def white(self):
        """Sets the color to be white
        Example: white = ptColor().white()
        """
        ...

    def yellow(self):
        """Sets the color to be yellow
        Example: yellow = ptColor().yellow()
        """
        ...

class ptCritterBrain:
    """Object to manipulate critter brains"""

    def addBehavior(self, animName, behaviorName, loop = 1, randomStartPos = 1, fadeInLen = 2.0, fadeOutLen = 2.0):
        """Adds a new animation to the brain as a behavior with the specified name and parameters. If multiple animations are assigned to the same behavior, they will be randomly picked from when started."""
        ...

    def addReceiver(self, key):
        """Tells the brain that the specified key wants AI messages"""
        ...

    def animationName(self, behavior):
        """Returns the animation name associated with the specified integral behavior."""
        ...

    def atGoal(self):
        """Are we currently are our final destination?"""
        ...

    def avoidingAvatars(self):
        """Are we currently avoiding avatars while pathfinding?"""
        ...

    def behaviorName(self, behavior):
        """Returns the behavior name associated with the specified integral behavior."""
        ...

    def canHearAvatar(self, avatarID):
        """Returns whether this brain can hear the avatar with the specified id."""
        ...

    def canSeeAvatar(self, avatarID):
        """Returns whether this brain can see the avatar with the specified id."""
        ...

    def curBehavior(self):
        """Returns the current integral behavior the brain is running."""
        ...

    def currentGoal(self):
        """Returns the current ptPoint that the brain is running towards."""
        ...

    def getHearingDistance(self):
        """Returns how far away the brain can hear."""
        ...

    def getLocallyControlled(self) -> bool:
        """Are we the one making AI decisions? NOTE: Not set automatically, some python script needs to tell the brain this using setLocallyControlled()."""
        ...

    def getSceneObject(self):
        """Returns the ptSceneObject this brain controls."""
        ...

    def getSightCone(self):
        """Returns the width of the brain's field of view in radians."""
        ...

    def getSightDistance(self):
        """Returns how far the brain can see."""
        ...

    def getStopDistance(self):
        """Returns how far away from the goal we could be and still be considered there."""
        ...

    def goToGoal(self, newGoal, avoidingAvatars = 0):
        """Tells the brain to start running towards the specified location, avoiding avatars it can see or hear if told to."""
        ...

    def idleBehaviorName(self):
        """Returns the name of the brain's idle behavior."""
        ...

    def nextBehavior(self):
        """Returns the behavior the brain will be switching to next frame. (-1 if no change)"""
        ...

    def playersICanHear(self):
        """Returns a list of player ids which this brain can hear."""
        ...

    def playersICanSee(self):
        """Returns a list of player ids which this brain can see."""
        ...

    def removeReceiver(self, key):
        """Tells the brain that the specified key no longer wants AI messages"""
        ...

    def runBehaviorName(self):
        """Returns the name of the brain's run behavior."""
        ...

    def runningBehavior(self, behaviorName):
        """Returns true if the named behavior is running."""
        ...

    def setHearingDistance(self, dist):
        """Set how far away the brain can hear (360 degree field of hearing)."""
        ...

    def setLocallyControlled(self, local: bool) -> None:
        """Tells the brain that we are the ones making all the AI decisions, and to prop location and other information to the server."""
        ...

    def setSightCone(self, radians):
        """Set how wide the brain's field of view is in radians. Note that it is the total angle of the cone, half on one side of the brain's line of sight, half on the other."""
        ...

    def setSightDistance(self, dist):
        """Set how far away the brain can see."""
        ...

    def setStopDistance(self, dist):
        """Set how far away from the goal we should be when we are considered there and stop running."""
        ...

    def startBehavior(self, behaviorName, fade = 1):
        """Starts playing the named behavior. If fade is true, it will fade out the previous behavior and fade in the new one. If false, they will immediately switch."""
        ...

    def vectorToPlayer(self, avatarID):
        """Returns the vector between us and the specified player."""
        ...

class ptDniCoordinates:
    """Constructor for a D'Ni coordinate"""

    def fromPoint(self, pt):
        """Update these coordinates with the specified ptPoint3"""
        ...

    def getHSpans(self):
        """Returns the HSpans component of the coordinate"""
        ...

    def getTorans(self):
        """Returns the Torans component of the coordinate"""
        ...

    def getVSpans(self):
        """Returns the VSpans component of the coordinate"""
        ...

    def update(self):
        """Update these coordinates with the players current position"""
        ...

class ptDraw:
    """Plasma Draw class"""

    def disable(self):
        """Disables the draw on the sceneobject attached
        In other words, makes it invisible
        """
        ...

    def enable(self, state=1):
        """Sets the draw enable for the sceneobject attached"""
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

class ptDynamicMap:
    """Creates a ptDynamicMap object"""

    def __init__(self, key=None):
        ...

    def addKey(self, key):
        """Add a receiver... in other words a DynamicMap"""
        ...

    def calcTextExtents(self, text):
        """Calculates the extent of the specified text, returns it as a (width, height) tuple"""
        ...

    def clearKeys(self):
        """Clears the receiver list"""
        ...

    def clearToColor(self, color):
        """Clear the DynamicMap to the specified color
        - 'color' is a ptColor object
        """
        ...

    def drawImage(self, x, y, image, respectAlphaFlag):
        """Draws a ptImage object on the dynamicTextmap starting at the location x,y"""
        ...

    def drawImageClipped(self, x, y, image, cx, cy, cw, ch, respectAlphaFlag):
        """Draws a ptImage object clipped to cx,cy with cw(width),ch(height)"""
        ...

    def drawText(self, x, y, text):
        """Draw text at a specified location
        - x,y is the point to start drawing the text
        - 'text' is a string of the text to be drawn
        """
        ...

    def fillRect(self, left, top, right, bottom, color):
        """Fill in the specified rectangle with a color
        - left,top,right,bottom define the rectangle
        - 'color' is a ptColor object
        """
        ...

    def flush(self):
        """Flush all the commands that were issued since the last flush()"""
        ...

    def frameRect(self, left, top, right, bottom, color):
        """Frame a rectangle with a specified color
        - left,top,right,bottom define the rectangle
        - 'color' is a ptColor object
        """
        ...

    def getHeight(self):
        """Returns the height of the dynamicTextmap"""
        ...

    def getImage(self):
        """Returns a pyImage associated with the dynamicTextmap"""
        ...

    def getWidth(self):
        """Returns the width of the dynamicTextmap"""
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        This only applies when NetPropagate is set to true
        """
        ...

    def netPropagate(self, propagateFlag):
        """Specify whether this object needs to use messages that are sent on the network
        - The default is for this to be false.
        """
        ...

    def purgeImage(self):
        """Purge the DynamicTextMap images"""
        ...

    def sender(self, sender):
        """Set the sender of the message being sent to the DynamicMap"""
        ...

    def setClipping(self, clipLeft, clipTop, clipRight, clipBottom):
        """Sets the clipping rectangle
        - All drawtext will be clipped to this until the
        unsetClipping() is called
        """
        ...

    def setFont(self, facename, size):
        """Set the font of the text to be written
        - 'facename' is a string with the name of the font
        - 'size' is the point size of the font to use
        """
        ...

    def setJustify(self, justify):
        """Sets the justification of the text. (justify is a PtJustify)"""
        ...

    def setLineSpacing(self, spacing):
        """Sets the line spacing (in pixels)"""
        ...

    def setTextColor(self, color, blockRGB=0):
        """Set the color of the text to be written
        - 'color' is a ptColor object
        - 'blockRGB' must be true if you're trying to render onto a transparent or semi-transparent color
        """
        ...

    def setWrapping(self, wrapWidth, wrapHeight):
        """Set where text will be wrapped horizontally and vertically
        - All drawtext commands will be wrapped until the
        unsetWrapping() is called
        """
        ...

    def unsetClipping(self):
        """Stop the clipping of text"""
        ...

    def unsetWrapping(self):
        """Stop text wrapping"""
        ...

class ptGUIControl:
    """Base class for all GUI controls"""

    def __init__(self, controlKey):
        ...

    def disable(self):
        """Disables this GUI control"""
        ...

    def enable(self, flag=1):
        """Enables this GUI control"""
        ...

    def focus(self):
        """Gets focus for this GUI control"""
        ...

    def getBackColor(self):
        """Returns the background color"""
        ...

    def getBackSelectColor(self):
        """Returns the background selection color"""
        ...

    def getFontFlags(self):
        """Returns the current fontflags"""
        ...

    def getFontSize(self):
        """Returns the font size"""
        ...

    def getForeColor(self):
        """Returns the foreground color"""
        ...

    def getKey(self):
        """Returns the ptKey for this GUI control"""
        ...

    def getObjectCenter(self):
        """Returns ptPoint3 of the center of the GUI control object"""
        ...

    def getOwnerDialog(self):
        """Returns a ptGUIDialog of the dialog that owns this GUI control"""
        ...

    def getSelectColor(self):
        """Returns the selection color"""
        ...

    def getTagID(self):
        """Returns the Tag ID for this GUI control"""
        ...

    def hide(self):
        """Hides this GUI control"""
        ...

    def isEnabled(self):
        """Returns whether this GUI control is enabled"""
        ...

    def isFocused(self):
        """Returns whether this GUI control has focus"""
        ...

    def isInteresting(self):
        """Returns whether this GUI control is interesting at the moment"""
        ...

    def isVisible(self):
        """Returns whether this GUI control is visible"""
        ...

    def refresh(self):
        """UNKNOWN"""
        ...

    def setBackColor(self, r, g, b, a):
        """Sets the background color"""
        ...

    def setBackSelectColor(self, r, g, b, a):
        """Sets the selection background color"""
        ...

    def setFocus(self, state):
        """Sets the state of the focus of this GUI control"""
        ...

    def setFontFlags(self, fontflags):
        """Sets current fontflags"""
        ...

    def setFontSize(self, fontSize):
        """Sets the font size"""
        ...

    def setForeColor(self, r, g, b, a):
        """Sets the foreground color"""
        ...

    def setNotifyOnInteresting(self, state):
        """Sets whether this control should send interesting events or not"""
        ...

    def setObjectCenter(self, point):
        """Sets the GUI controls object center to 'point'"""
        ...

    def setSelectColor(self, r, g, b, a):
        """Sets the selection color"""
        ...

    def setVisible(self, state):
        """Sets the state of visibility of this GUI control"""
        ...

    def show(self):
        """Shows this GUI control"""
        ...

    def unFocus(self):
        """Releases focus for this GUI control"""
        ...

class ptGUIControlButton(ptGUIControl):
    """Plasma GUI Control Button class"""

    def __init__(self, ctrlKey):
        ...

    def getNotifyType(self):
        """Returns this button's notify type. See PtButtonNotifyTypes"""
        ...

    def isButtonDown(self):
        """Is the button down? Returns 1 for true otherwise returns 0"""
        ...

    def setNotifyType(self, kind):
        """Sets this button's notify type. See PtButtonNotifyTypes"""
        ...

class ptGUIControlCheckBox(ptGUIControl):
    """Plasma GUI Control Checkbox class"""

    def __init__(self, ctrlKey):
        ...

    def isChecked(self):
        """Is this checkbox checked? Returns 1 for true otherwise returns 0"""
        ...

    def setChecked(self, checkedState):
        """Sets this checkbox to the 'checkedState'"""
        ...

class ptGUIControlClickMap(ptGUIControl):
    """Plasma GUI control Click Map"""

    def __init__(self, ctrlKey):
        ...

    def getLastMouseDragPoint(self):
        """Returns the last point the mouse was dragged to"""
        ...

    def getLastMousePoint(self):
        """Returns the last point the mouse was at"""
        ...

    def getLastMouseUpPoint(self):
        """Returns the last point the mouse was released at"""
        ...

class ptGUIControlDragBar(ptGUIControl):
    """Plasma GUI Control DragBar class"""

    def __init__(self, ctrlKey):
        ...

    def anchor(self):
        """Don't allow this dragbar object to be moved by the user.
        Drop anchor!
        """
        ...

    def isAnchored(self):
        """Is this dragbar control anchored? Returns 1 if true otherwise returns 0"""
        ...

    def unanchor(self):
        """Allow the user to drag this control around the screen.
        Raise anchor.
        """
        ...

class ptGUIControlDraggable(ptGUIControl):
    """Plasma GUI control for something draggable"""

    def __init__(self, ctrlKey):
        ...

    def getLastMousePoint(self):
        """Returns the last point we were dragged to"""
        ...

    def stopDragging(self, cancelFlag):
        """UNKNOWN"""
        ...

class ptGUIControlDynamicText(ptGUIControl):
    """Plasma GUI Control DynamicText class"""

    def __init__(self, ctrlKey):
        ...

    def getMap(self, index):
        """Returns a specific ptDynamicText attached to this contol
        If there is no map at 'index' then a KeyError exception will be raised
        """
        ...

    def getNumMaps(self):
        """Returns the number of ptDynamicText maps attached"""
        ...

class ptGUIControlEditBox(ptGUIControl):
    """Plasma GUI Control Editbox class"""

    def __init__(self, ctrlKey):
        ...

    def clearString(self):
        """Clears the editbox."""
        ...

    def end(self):
        """Sets the cursor in the editbox to the after the last character."""
        ...

    def getLastKeyCaptured(self):
        """Gets the last capture key"""
        ...

    def getLastModifiersCaptured(self):
        """Gets the last modifiers flags captured"""
        ...

    def getString(self):
        """Returns the sting that the user typed in."""
        ...

    def home(self):
        """Sets the cursor in the editbox to before the first character."""
        ...

    def setChatMode(self, state):
        """Set the Chat mode on this control"""
        ...

    def setColor(self, foreColor, backColor):
        """Sets the fore and back color of the editbox."""
        ...

    def setLastKeyCapture(self, key, modifiers):
        """Set last key captured"""
        ...

    def setSelectionColor(self, foreColor, backColor):
        """Sets the selection color of the editbox."""
        ...

    def setSpecialCaptureKeyMode(self, state):
        """Set the Capture mode on this control"""
        ...

    def setString(self, text):
        """Pre-sets the editbox to a string."""
        ...

    def setStringSize(self, size):
        """Sets the maximum size of the string that can be inputted by the user."""
        ...

    def wasEscaped(self):
        """If the editbox was escaped then return 1 else return 0"""
        ...

class ptGUIControlValue(ptGUIControl):
    """Plasma GUI Control Value class  - knobs, spinners"""

    def __init__(self, ctrlKey):
        ...

    def getMax(self):
        """Returns the maximum of the control."""
        ...

    def getMin(self):
        """Returns the minimum of the control."""
        ...

    def getStep(self):
        """Returns the step increment of the control."""
        ...

    def getValue(self):
        """Returns the current value of the control."""
        ...

    def setRange(self, minimum, maximum):
        """Sets the minimum and maximum range of the control."""
        ...

    def setStep(self, step):
        """Sets the step increment of the control."""
        ...

    def setValue(self, value):
        """Sets the current value of the control."""
        ...

class ptGUIControlKnob(ptGUIControlValue):
    """Plasma GUI control for knob"""

    def __init__(self, ctrlKey):
        ...

class ptGUIControlListBox(ptGUIControl):
    """Plasma GUI Control List Box class"""

    def __init__(self, ctrlKey):
        ...

    def add2StringsWithColors(self, text1, color1, text2, color2, respectAlpha):
        """Doesn't work right - DONT USE"""
        ...

    def addBranch(self, name, initiallyOpen):
        """UNKNOWN"""
        ...

    def addImage(self, image, respectAlphaFlag):
        """Appends an image item to the listbox"""
        ...

    def addImageAndSwatchesInBox(self, image, x, y, width, height, respectAlpha, primary, secondary):
        """Add the image and color swatches to the list"""
        ...

    def addImageInBox(self, image, x, y, width, height, respectAlpha):
        """Appends an image item to the listbox, centering within the box dimension."""
        ...

    def addSelection(self, item):
        """Adds item to selection list"""
        ...

    def addString(self, text):
        """Appends a list item 'text' to the listbox."""
        ...

    def addStringInBox(self, text, min_width, min_height):
        """Adds a text list item that has a minimum width and height"""
        ...

    def addStringWithColor(self, text, color, inheritAlpha):
        """Adds a colored string to the list box"""
        ...

    def addStringWithColorWithSize(self, text, color, inheritAlpha, fontsize):
        """Adds a text list item with a color and different font size"""
        ...

    def allowNoSelect(self):
        """Allows the listbox to have no selection"""
        ...

    def clearAllElements(self):
        """Removes all the items from the listbox, making it empty."""
        ...

    def clickable(self):
        """Sets this listbox to be clickable by the user."""
        ...

    def closeBranch(self):
        """UNKNOWN"""
        ...

    def disallowNoSelect(self):
        """The listbox must always have a selection"""
        ...

    def findString(self, text):
        """Finds and returns the index of the item that matches 'text' in the listbox."""
        ...

    def getBranchList(self):
        """get a list of branches in this list (index,isShowingChildren)"""
        ...

    def getElement(self, index):
        """Get the string of the item at 'index' in the listbox."""
        ...

    def getNumElements(self):
        """Return the number of items in the listbox."""
        ...

    def getScrollPos(self):
        """Returns the current scroll position in the listbox."""
        ...

    def getScrollRange(self):
        """Returns the max scroll position"""
        ...

    def getSelection(self):
        """Returns the currently selected list item in the listbox."""
        ...

    def getSelectionList(self):
        """Returns the current selection list"""
        ...

    def lock(self):
        """Locks the updates to a listbox, so a number of operations can be performed
        NOTE: an unlock() call must be made before the next lock() can be.
        """
        ...

    def refresh(self):
        """Refresh the display of the listbox (after updating contents)."""
        ...

    def removeElement(self, index):
        """Removes element at 'index' in the listbox."""
        ...

    def removeSelection(self, item):
        """Removes item from selection list"""
        ...

    def scrollToBegin(self):
        """Scrolls the listbox to the beginning of the list"""
        ...

    def scrollToEnd(self):
        """Scrolls the listbox to the end of the list"""
        ...

    def setElement(self, index, text):
        """Set a particular item in the listbox to a string."""
        ...

    def setGlobalSwatchEdgeOffset(self, offset):
        """Sets the edge offset of the color swatches"""
        ...

    def setGlobalSwatchSize(self, size):
        """Sets the size of the color swatches"""
        ...

    def setScrollPos(self, pos):
        """Sets the scroll position of the listbox to 'pos'"""
        ...

    def setSelection(self, selectionIndex):
        """Sets the current selection in the listbox."""
        ...

    def setStringJustify(self, index, justify):
        """Sets the text justification"""
        ...

    def unclickable(self):
        """Makes this listbox not clickable by the user.
        Useful when just displaying a list that is not really selectable.
        """
        ...

    def unlock(self):
        """Unlocks updates to a listbox and does any saved up changes"""
        ...

class ptGUIControlMultiLineEdit(ptGUIControl):
    """Plasma GUI Control Multi-line edit class"""

    def __init__(self, ctrlKey):
        ...

    def beginUpdate(self):
        """Signifies that the control will be updated heavily starting now, so suppress all redraws"""
        ...

    def clearBuffer(self):
        """Clears all text from the multi-line edit control."""
        ...

    def clearLink(self) -> None:
        """Ends the hyperlink hotspot, if any, at the current cursor position."""
        ...

    def clickable(self):
        """Sets this listbox to be clickable by the user."""
        ...

    def deleteChar(self):
        """Deletes a character at the current cursor position."""
        ...

    def deleteLinesFromTop(self, numLines):
        """Deletes the specified number of lines from the top of the text buffer"""
        ...

    def disableScrollControl(self):
        """Disables the scroll control if there is one"""
        ...

    def enableScrollControl(self):
        """Enables the scroll control if there is one"""
        ...

    def endUpdate(self, redraw=True):
        """Signifies that the massive updates are over. We can now redraw."""
        ...

    def getBufferLimit(self):
        """Returns the current buffer limit"""
        ...

    def getBufferSize(self):
        """Returns the size of the buffer"""
        ...

    def getCurrentLink(self) -> int:
        """Returns the link the mouse is currently over."""
        ...

    def getCursor(self) -> int:
        """Get the current position of the cursor in the encoded buffer."""
        ...

    def getEncodedBuffer(self):
        """Returns the encoded buffer in a python buffer object."""
        ...

    def getFontSize(self):
        """Returns the current default font size"""
        ...

    def getMargins(self) -> Tuple[int, int, int, int]:
        """Returns a tuple of (top, left, bottom, right) margins"""
        ...

    def getScrollPosition(self):
        """Returns what line is the top line."""
        ...

    def getString(self):
        """Gets the string of the edit control."""
        ...

    def insertChar(self, c):
        """Inserts a character at the current cursor position."""
        ...

    def insertColor(self, color):
        """Inserts an encoded color object at the current cursor position.
        'color' is a ptColor object.
        """
        ...

    def insertLink(self, linkId: int) -> None:
        """Inserts a link hotspot at the current cursor position."""
        ...

    def insertString(self, string):
        """Inserts a string at the current cursor position."""
        ...

    def insertStyle(self, style):
        """Inserts an encoded font style at the current cursor position."""
        ...

    def isAtEnd(self):
        """Returns true if the end of the buffer has been reached."""
        ...

    def isLocked(self):
        """Is the multi-line edit control locked? Returns 1 if true otherwise returns 0"""
        ...

    def isUpdating(self) -> bool:
        """Is someone else already suppressing redraws of the control?"""
        ...

    def lock(self):
        """Locks the multi-line edit control so the user cannot make changes."""
        ...

    def moveCursor(self, direction):
        """Move the cursor in the specified direction (see PtGUIMultiLineDirection)"""
        ...

    def setBufferLimit(self, bufferLimit):
        """Sets the buffer max for the editbox"""
        ...

    def setEncodedBuffer(self, bufferObject):
        """Sets the edit control to the encoded buffer in the python buffer object."""
        ...

    def setFontSize(self, fontSize):
        """Sets the default font size for the edit control"""
        ...

    def setMargins(self, top: Optional[int] = None, left: Optional[int] = None, bottom: Optional[int] = None, right: Optional[int] = None) -> None:
        """Sets the control's margins"""
        ...

    def setScrollPosition(self, topLine):
        """Sets the what line is the top line."""
        ...

    def setString(self, text):
        """Sets the multi-line edit control string."""
        ...

    def unclickable(self):
        """Makes this listbox not clickable by the user.
        Useful when just displaying a list that is not really selectable.
        """
        ...

    def unlock(self):
        """Unlocks the multi-line edit control so that the user can make changes."""
        ...

class ptGUIControlProgress(ptGUIControlValue):
    """Plasma GUI control for progress bar"""

    def __init__(self, ctrlKey):
        ...

    def animateToPercent(self, percent):
        """Sets the value of the control and animates to that point."""
        ...

class ptGUIControlRadioGroup(ptGUIControl):
    """Plasma GUI Control Radio Group class"""

    def __init__(self, ctrlKey):
        ...

    def getValue(self):
        """Returns the current selection of the radio group."""
        ...

    def setValue(self, value):
        """Sets the current selection to 'value'"""
        ...

class ptGUIControlTextBox(ptGUIControl):
    """Plasma GUI Control Textbox class"""

    def __init__(self, ctrlKey):
        ...

    def getForeColor(self):
        """Returns the current forecolor"""
        ...

    def getString(self):
        """Returns the string that the TextBox is set to (in case you forgot)"""
        ...

    def getStringJustify(self):
        """Returns current justify"""
        ...

    def setBackColor(self, color):
        """Sets the text backcolor to 'color', which is a ptColor object."""
        ...

    def setFontSize(self, size):
        """Don't use"""
        ...

    def setForeColor(self, color):
        """Sets the text forecolor to 'color', which is a ptColor object."""
        ...

    def setString(self, text):
        """Sets the textbox string to 'text'"""
        ...

    def setStringJustify(self, justify):
        """Sets current justify"""
        ...

class ptGUIControlUpDownPair(ptGUIControlValue):
    """Plasma GUI control for up/down pair"""

    def __init__(self, ctrlKey):
        ...

class ptGUIDialog:
    """Plasma GUI dialog class"""

    def __init__(self, dialogKey):
        ...

    def disable(self):
        """Disables this dialog"""
        ...

    def enable(self, enableFlag=1):
        """Enable this dialog"""
        ...

    def getBackColor(self):
        """Returns the back color as a ptColor object"""
        ...

    def getBackSelectColor(self):
        """Returns the select back color as a ptColor object"""
        ...

    def getControlFromIndex(self, index):
        """Returns the ptKey of the control with the specified index (not tag ID!)"""
        ...

    def getControlFromTag(self, tagID):
        """Returns the ptKey of the control with the specified tag ID"""
        ...

    def getControlModFromIndex(self, index: int) -> ptGUIControl:
        """Returns the ptGUIControl with the specified index (not tag ID!)"""
        ...

    def getControlModFromTag(self, tagID: int) -> ptGUIControl:
        """Returns the ptGUIControl with the specified tag ID"""
        ...

    def getFontSize(self):
        """Returns the font size"""
        ...

    def getForeColor(self):
        """Returns the fore color as a ptColor object"""
        ...

    def getKey(self):
        """Returns this dialog's ptKey"""
        ...

    def getName(self):
        """Returns the dialog's name"""
        ...

    def getNumControls(self):
        """Returns the number of controls in this dialog"""
        ...

    def getSelectColor(self):
        """Returns the select color as a ptColor object"""
        ...

    def getTagID(self):
        """Returns this dialog's tag ID"""
        ...

    def getVersion(self):
        """UNKNOWN"""
        ...

    def hide(self):
        """Hides the dialog"""
        ...

    def isEnabled(self):
        """Is this dialog currently enabled?"""
        ...

    def noFocus(self):
        """Makes sure no control has input focus"""
        ...

    def refreshAllControls(self):
        """Tells the dialog to redraw all its controls"""
        ...

    def setBackColor(self, red, green, blue, alpha):
        """Sets the back color, -1 means don't change"""
        ...

    def setBackSelectColor(self, red, green, blue, alpha):
        """Sets the select back color, -1 means don't change"""
        ...

    def setFocus(self, ctrlKey):
        """Sets the control that has input focus"""
        ...

    def setFontSize(self, fontSize):
        """Sets the font size"""
        ...

    def setForeColor(self, red, green, blue, alpha):
        """Sets the fore color, -1 means don't change"""
        ...

    def setSelectColor(self, red, green, blue, alpha):
        """Sets the select color, -1 means don't change"""
        ...

    def show(self):
        """Shows the dialog"""
        ...

    def showNoReset(self):
        """Show dialog without resetting clickables"""
        ...

    def updateAllBounds(self):
        """Tells the dialog to recompute all the bounds for its controls"""
        ...

class ptGUIPopUpMenu:
    """Takes three diferent argument lists:
    gckey
    name,screenOriginX,screenOriginY
    name,parent,screenOriginX,screenOriginY
    """

    def __init__(self, arg1, arg2=None, arg3=None, arg4=None):
        ...

    def addConsoleCmdItem(self, name, consoleCmd):
        """Adds a new item to the menu that fires a console command"""
        ...

    def addNotifyItem(self, name):
        """Adds a new item ot the mneu"""
        ...

    def addSubMenuItem(self, name, subMenu):
        """Adds a submenu to this menu"""
        ...

    def disable(self):
        """Disables this menu"""
        ...

    def enable(self, state=1):
        """Enables/disables this menu"""
        ...

    def getBackColor(self):
        """Returns the background color"""
        ...

    def getBackSelectColor(self):
        """Returns the background selection color"""
        ...

    def getForeColor(self):
        """Returns the foreground color"""
        ...

    def getKey(self):
        """Returns this menu's key"""
        ...

    def getName(self):
        """Returns this menu's name"""
        ...

    def getSelectColor(self):
        """Returns the selection color"""
        ...

    def getTagID(self):
        """Returns this menu's tag id"""
        ...

    def getVersion(self):
        """UNKNOWN"""
        ...

    def hide(self):
        """Hides this menu"""
        ...

    def isEnabled(self):
        """Returns whether this menu is enabled or not"""
        ...

    def setBackColor(self, r, g, b, a):
        """Sets the background color"""
        ...

    def setBackSelectColor(self, r, g, b, a):
        """Sets the selection background color"""
        ...

    def setForeColor(self, r, g, b, a):
        """Sets the foreground color"""
        ...

    def setSelectColor(self, r, g, b, a):
        """Sets the selection color"""
        ...

    def show(self):
        """Shows this menu"""
        ...

class ptGUISkin:
    """Plasma GUI Skin object"""

    def __init__(self, key):
        ...

    def getKey(self):
        """Returns this object's ptKey"""
        ...

class ptGameScore:
    """Plasma Game Score"""

    def addPoints(self, points, key=None):
        """Adds points to the score"""
        ...

    @staticmethod
    def createAgeScore(scoreName, type, points=0, key=None):
        """Creates a new score associated with this age"""
        ...

    @staticmethod
    def createGlobalScore(scoreName, type, points=0, key=None):
        """Creates a new global score"""
        ...

    @staticmethod
    def createPlayerScore(scoreName, type, points=0, key=None):
        """Creates a new score associated with this player"""
        ...

    @staticmethod
    def createScore(ownerID, scoreName, type, points=0, key=None):
        """Creates a new score for an arbitrary owner"""
        ...

    @staticmethod
    def findAgeHighScores(name, maxScores, key):
        """Finds the highest matching scores for the current age's owners"""
        ...

    @staticmethod
    def findAgeScores(scoreName, key):
        """Finds matching scores for this age"""
        ...

    @staticmethod
    def findGlobalHighScores(name, maxScores, key):
        """Finds the highest matching scores"""
        ...

    @staticmethod
    def findGlobalScores(scoreName, key):
        """Finds matching global scores"""
        ...

    @staticmethod
    def findPlayerScores(scoreName, key):
        """Finds matching player scores"""
        ...

    @staticmethod
    def findScores(ownerID, scoreName, key):
        """Finds matching scores for an arbitrary owner"""
        ...

    def getGameType(self):
        """Returns the score game type."""
        ...

    def getName(self):
        """Returns the score game name."""
        ...

    def getOwnerID(self):
        """Returns the score owner."""
        ...

    def getPoints(self):
        """Returns the number of points in this score"""
        ...

    def remove(self):
        """Removes this score from the server"""
        ...

    def setPoints(self, numPoints, key):
        """Sets the number of points in the score
        Don't use to add/remove points, use only to reset values!
        """
        ...

    def transferPoints(self, dest, points=0, key=None):
        """Transfers points from this score to another"""
        ...

class ptGameScoreMsg:
    """Game Score operation callback message"""

class ptGameScoreListMsg(ptGameScoreMsg):
    """Game Score message for scores found on the server"""

    def getName(self):
        """Returns the template score name"""
        ...

    def getOwnerID(self):
        """Returns the template score ownerID"""
        ...

    def getScores(self):
        """Returns a list of scores found by the server"""
        ...

class ptGameScoreTransferMsg(ptGameScoreMsg):
    """Game Score message indicating a score point transfer"""

    def getDestination(self):
        """Returns the score points were transferred to"""
        ...

    def getSource(self):
        """Returns the score points were transferred from"""
        ...

class ptGameScoreUpdateMsg(ptGameScoreMsg):
    """Game Score message for a score update operation"""

    def getScore(self):
        """Returns the updated game score"""
        ...

class ptGrassShader:
    """Plasma Grass Shader class"""

    def __init__(self, key):
        ...

    def getWaveDirection(self, waveNum):
        """Gets the wave waveNum's direction as a tuple of x,y. waveNum must be between 0 and plGrassShaderMod::kNumWaves-1 (currently 3) inclusive"""
        ...

    def getWaveDistortion(self, waveNum):
        """Gets the wave waveNum's distortion as a tuple of x,y,z. waveNum must be between 0 and plGrassShaderMod::kNumWaves-1 (currently 3) inclusive"""
        ...

    def getWaveSpeed(self, waveNum):
        """Gets the wave waveNum's speed as a float. waveNum must be between 0 and plGrassShaderMod::kNumWaves-1 (currently 3) inclusive"""
        ...

    def resetWaves(self):
        """Resets wave data to 0"""
        ...

    def setWaveDirection(self, waveNum, direction):
        """Sets the wave waveNum's direction as a tuple of x,y. waveNum must be between 0 and plGrassShaderMod::kNumWaves-1 (currently 3) inclusive"""
        ...

    def setWaveDistortion(self, waveNum, distortion):
        """Sets the wave waveNum's distortion as a tuple of x,y,z. waveNum must be between 0 and plGrassShaderMod::kNumWaves-1 (currently 3) inclusive"""
        ...

    def setWaveSpeed(self, waveNum, speed):
        """Sets the wave waveNum's speed as a float. waveNum must be between 0 and plGrassShaderMod::kNumWaves-1 (currently 3) inclusive"""
        ...

class ptImage:
    """Plasma image class"""

    def __init__(self, imgKey):
        ...

    def getColorLoc(self, color):
        """Returns the ptPoint3 where the specified color is located"""
        ...

    def getHeight(self):
        """Returns the height of the image"""
        ...

    def getPixelColor(self, x, y):
        """Returns the ptColor at the specified location (float from 0 to 1)"""
        ...

    def getWidth(self):
        """Returns the width of the image"""
        ...

    def saveAsJPEG(self, filename, quality=75):
        """Saves this image to disk as a JPEG file"""
        ...

    def saveAsPNG(self, filename):
        """Saves this image to disk as a PNG file"""
        ...

class ptImageLibMod:
    """Plasma image library modifier class"""

    def __init__(self, ilmKey):
        ...

    def getImage(self, name):
        """Returns the ptImage with the specified name"""
        ...

    def getImages(self):
        """Returns a tuple of the library's ptImages"""
        ...

    def getNames(self):
        """Returns a tuple of the image names"""
        ...

class ptInputInterface:
    """Plasma input interface class"""

    def popTelescope(self):
        """pops off the telescope interface and gos back to previous interface"""
        ...

    def pushTelescope(self):
        """pushes on the telescope interface"""
        ...

class ptKey:
    """Plasma Key class"""

    def disable(self):
        """Sends a disable message to whatever this ptKey is pointing to"""
        ...

    def enable(self):
        """Sends an enable message to whatever this ptKey is pointing to"""
        ...

    def getName(self):
        """Get the name of the object that this ptKey is pointing to"""
        ...

    def getParentKey(self):
        """This will return a ptKey object that is the parent of this modifer
        However, if the parent is not a modifier or not loaded, then None is returned.
        """
        ...

    def getSceneObject(self):
        """This will return a ptSceneobject object that is associated with this ptKey
        However, if this ptKey is _not_ a sceneobject, then unpredicatable results will ensue
        """
        ...

    def isAttachedToClone(self):
        """Returns whether the python file mod is attached to a clone"""
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

class ptKeyMap:
    """Accessor class to the Key Mapping functions"""

    def bindKey(self, key1, key2, action):
        """Bind keys to an action"""
        ...

    def bindKeyToConsoleCommand(self, keyStr1, command):
        """Binds key to console command"""
        ...

    def convertCharToControlCode(self, controlCodeString):
        """Convert string version of control code to number"""
        ...

    def convertCharToFlags(self, charString):
        """Convert char string to flags"""
        ...

    def convertCharToVKey(self, charString):
        """Convert char string to virtual key"""
        ...

    def convertControlCodeToString(self, controlCode):
        """Convert control code to character string"""
        ...

    def convertVKeyToChar(self, virtualKey, flags):
        """Convert virtual key and shift flags to string"""
        ...

    def getBindingFlags1(self, controlCode):
        """Returns modifier flags for controlCode"""
        ...

    def getBindingFlags2(self, controlCode):
        """Returns modifier flags for controlCode"""
        ...

    def getBindingFlagsConsole(self, command):
        """Returns modifier flags for the console command mapping"""
        ...

    def getBindingKey1(self, controlCode):
        """Returns key code for controlCode"""
        ...

    def getBindingKey2(self, controlCode):
        """Returns key code for controlCode"""
        ...

    def getBindingKeyConsole(self, command):
        """Returns key for console command mapping"""
        ...

    def writeKeyMap(self):
        """Forces write of the keymap file"""
        ...

class ptLayer:
    """Plasma layer class"""

    def __init__(self, layerKey):
        ...

    def getTexture(self) -> ptImage:
        """Returns the image texture of the layer"""
        ...

    def setTexture(self, image: ptImage) -> None:
        """Sets the ptImage texture of the layer"""
        ...

class ptMarkerMgr:
    """Marker manager accessor class"""

    def addMarker(self, x, y, z, id, justCreated):
        """Add a marker in the specified location with the specified id"""
        ...

    def areLocalMarkersShowing(self):
        """Returns true if we are showing the markers on this local machine"""
        ...

    def captureQuestMarker(self, id, captured):
        """Sets a marker as captured or not"""
        ...

    def captureTeamMarker(self, id, team):
        """Sets a marker as captured by the specified team (0 = not captured)"""
        ...

    def clearSelectedMarker(self):
        """Unselects the selected marker"""
        ...

    def getMarkersRespawn(self):
        """Returns whether markers respawn after being captured, or not"""
        ...

    def getSelectedMarker(self):
        """Returns the id of the selected marker"""
        ...

    def hideMarkersLocal(self):
        """Hides the markers on your machine, so you can no longer see where they are"""
        ...

    def removeAllMarkers(self):
        """Removes all markers"""
        ...

    def removeMarker(self, id):
        """Removes the specified marker from the game"""
        ...

    def setMarkersRespawn(self, respawn):
        """Sets whether markers respawn after being captured, or not"""
        ...

    def setSelectedMarker(self, id):
        """Sets the selected marker to the one with the specified id"""
        ...

    def showMarkersLocal(self):
        """Shows the markers on your machine, so you can see where they are"""
        ...

class ptMatrix44:
    """Plasma Matrix44 class"""

    def copy(self):
        """Copies the matrix and returns the copy"""
        ...

    def getAdjoint(self, adjointMat):
        """Returns the adjoint of the matrix"""
        ...

    def getData(self):
        """Returns the matrix in tuple form"""
        ...

    def getDeterminant(self):
        """Get the matrix's determinant"""
        ...

    def getInverse(self, inverseMat):
        """Returns the inverse of the matrix"""
        ...

    def getParity(self):
        """Get the parity of the matrix"""
        ...

    def getTranslate(self, vector):
        """Returns the translate vector of the matrix (and sets vector to it as well)"""
        ...

    def getTranspose(self, transposeMat):
        """Returns the transpose of the matrix"""
        ...

    def make(self, fromPt, atPt, upVec):
        """Creates the matrix from from and at points, and the up vector"""
        ...

    def makeRotateMat(self, axis, radians):
        """Makes the matrix a rotation matrix"""
        ...

    def makeScaleMat(self, scale):
        """Makes the matrix a scaling matrix"""
        ...

    def makeTranslateMat(self, trans):
        """Makes the matrix a translation matrix"""
        ...

    def makeUpPreserving(self, fromPt, atPt, upVec):
        """Creates the matrix from from and at points, and the up vector (perserving the up vector)"""
        ...

    def reset(self):
        """Reset the matrix to identity"""
        ...

    def right(self):
        """Returns the right vector of the matrix"""
        ...

    def rotate(self, axis, radians):
        """Rotates the matrix by radians around the axis"""
        ...

    def scale(self, scale):
        """Scales the matrix by the vector"""
        ...

    def setData(self, mat):
        """Sets the matrix using tuples"""
        ...

    def translate(self, vector):
        """Translates the matrix by the vector"""
        ...

    def up(self):
        """Returns the up vector of the matrix"""
        ...

    def view(self):
        """Returns the view vector of the matrix"""
        ...

class ptMoviePlayer:
    """Accessor class to play in the MoviePlayer"""

    def __init__(self, movieName, selfKey):
        ...

    def pause(self):
        """Pauses the movie"""
        ...

    def play(self):
        """Plays the movie"""
        ...

    def playPaused(self):
        """Plays movie, but pauses at first frame"""
        ...

    def resume(self):
        """Resumes movie after pausing"""
        ...

    def setCenter(self, x, y):
        """Sets the center of the movie"""
        ...

    def setColor(self, color):
        """Sets the color of the movie"""
        ...

    def setOpacity(self, opacity):
        """Sets the opacity of the movie"""
        ...

    def setScale(self, width, height):
        """Sets the width and height scale of the movie"""
        ...

    def setVolume(self, volume):
        """Set the volume of the movie"""
        ...

    def stop(self):
        """Stops the movie"""
        ...

class ptNetLinkingMgr:
    """Constructor to get access to the net link manager"""

    def getCurrAgeLink(self):
        """Get the ptAgeLinkStruct for the current age"""
        ...

    def getPrevAgeLink(self):
        """Get the ptAgeLinkStruct for the previous age"""
        ...

    def isEnabled(self):
        """True if linking is enabled."""
        ...

    def linkPlayerHere(self, pid):
        """link player(pid) to where I am"""
        ...

    def linkPlayerToAge(self, ageLink, pid):
        """Link player(pid) to ageLink"""
        ...

    def linkToAge(self, ageLink, linkAnim):
        """Links to ageLink (ptAgeLinkStruct, string)"""
        ...

    def linkToMyNeighborhoodAge(self):
        """Link to my Neighborhood Age"""
        ...

    def linkToMyPersonalAge(self):
        """Link to my Personal Age"""
        ...

    def linkToMyPersonalAgeWithYeeshaBook(self):
        """Link to my Personal Age with the YeeshaBook"""
        ...

    def linkToPlayersAge(self, pid):
        """Link me to where player(pid) is"""
        ...

    def setEnabled(self, enable):
        """Enable/Disable linking."""
        ...

class ptNotify:
    """Creates a Notify message
    - selfKey is ptKey of your PythonFile modifier
    """

    def __init__(self, selfKey):
        ...

    def addActivateEvent(self, activeFlag, activateFlag):
        """Add an activate event record to the notify message"""
        ...

    def addCallbackEvent(self, eventNumber):
        """Add a callback event record to the notify message"""
        ...

    def addCollisionEvent(self, enterFlag, hitterKey, hitteeKey):
        """Add a collision event record to the Notify message"""
        ...

    def addContainerEvent(self, enteringFlag, containerKey, containedKey):
        """Add a container event record to the notify message"""
        ...

    def addControlKeyEvent(self, keynumber, downFlag):
        """Add a keyboard event record to the Notify message"""
        ...

    def addFacingEvent(self, enabledFlag, facerKey, faceeKey, dotProduct):
        """Add a facing event record to the Notify message"""
        ...

    def addPickEvent(self, enabledFlag, pickerKey, pickeeKey, hitPoint):
        """Add a pick event record to the Notify message"""
        ...

    def addReceiver(self, key):
        """Add a receivers key to receive this Notify message"""
        ...

    def addResponderState(self, state):
        """Add a responder state event record to the notify message"""
        ...

    def addVarFloat(self, name, number):
        """Add a float variable event record to the Notify message
        This event record is used to pass a number variable to another python program
        """
        ...

    def addVarInt(self, name, number):
        """Add a int variable event record to the Notify message
        This event record is used to pass a number variable to another python program
        """
        ...

    def addVarKey(self, name, key):
        """Add a ptKey variable event record to the Notify message
        This event record is used to pass a ptKey variable to another python program
        """
        ...

    def addVarNull(self, name, number):
        """Add a null (no data) variable event record to the Notify message
        This event record is used to pass a number variable to another python program
        """
        ...

    def addVarNumber(self, name, number):
        """Add a number variable event record to the Notify message
        Method will try to pick appropriate variable type
        This event record is used to pass a number variable to another python program
        """
        ...

    def clearReceivers(self):
        """Remove all the receivers that this Notify message has
        - receivers are automatically added if from a ptAttribActivator
        """
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

    def netPropagate(self, netFlag):
        """Sets the net propagate flag - default to set"""
        ...

    def send(self):
        """Send the notify message"""
        ...

    def setActivate(self, state):
        """Set the activate state to true(1.0) or false(0.0)"""
        ...

    def setType(self, type):
        """Sets the message type"""
        ...

class ptParticle:
    """Plasma particle system class"""

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

    def setGeneratorLife(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setHeightSize(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setInitPitchRange(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setInitYawRange(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setParticleLifeMaximum(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setParticleLifeMinimum(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setParticlesPerSecond(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setScaleMaximum(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setScaleMinimum(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setVelocityMaximum(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setVelocityMinimum(self, value):
        """NEEDS DOCSTRING"""
        ...

    def setWidthSize(self, value):
        """NEEDS DOCSTRING"""
        ...

class ptPhysics:
    """Plasma physics class"""

    def angularImpulse(self, impulseVector):
        """Add the given vector (representing a rotation axis and magnitude) to
        the attached sceneobject's velocity
        """
        ...

    def damp(self, damp):
        """Reduce all velocities on the object (0 = all stop, 1 = no effect)"""
        ...

    def disable(self):
        """Disables physics on the sceneobject attached"""
        ...

    def disableCollision(self):
        """Disables collision detection on the attached sceneobject"""
        ...

    def enable(self, state=1):
        """Sets the physics enable state for the sceneobject attached"""
        ...

    def enableCollision(self):
        """Enables collision detection on the attached sceneobject"""
        ...

    def force(self, forceVector):
        """Applies the specified force to the attached sceneobject"""
        ...

    def forceWithOffset(self, forceVector, offsetPt):
        """Applies the specified offsetted force to the attached sceneobject"""
        ...

    def impulse(self, impulseVector):
        """Adds the given vector to the attached sceneobject's velocity"""
        ...

    def impulseWithOffset(self, impulseVector, offsetPt):
        """Adds the given vector to the attached sceneobject's velocity
        with the specified offset
        """
        ...

    def move(self, direction, distance):
        """Moves the attached sceneobject the specified distance in the specified direction"""
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        """
        ...

    def rotate(self, radians, axis):
        """Rotates the attached sceneobject the specified radians around the specified axis"""
        ...

    def setAngularVelocity(self, velocityVector):
        """Sets the objects AngularVelocity to the specified vector"""
        ...

    def setLinearVelocity(self, velocityVector):
        """Sets the objects LinearVelocity to the specified vector"""
        ...

    def shiftMass(self, offsetVector):
        """Shifts the attached sceneobject's center to mass in the specified direction and distance"""
        ...

    def suppress(self, doSuppress):
        """Completely remove the physical, but keep it around so it
        can be added back later.
        """
        ...

    def torque(self, torqueVector):
        """Applies the specified torque to the attached sceneobject"""
        ...

    def warp(self, position):
        """Warps the sceneobject to a specified location.
        'position' can be a ptPoint3 or a ptMatrix44
        """
        ...

    def warpObj(self, objkey):
        """Warps the sceneobject to match the location and orientation of the specified object"""
        ...

class ptPlayer:
    """And optionally __init__(name,playerID)"""

    def __init__(self, avkey, name, playerID, distanceSq):
        ...

    def getDistanceSq(self):
        """Returns the distance to remote player from local player"""
        ...

    def getPlayerID(self):
        """Returns the unique player ID"""
        ...

    def getPlayerName(self):
        """Returns the name of the player"""
        ...

    def isCCR(self):
        """Is this player a CCR?"""
        ...

    def isServer(self):
        """Is this player a server?"""
        ...

class ptPoint3:
    """Plasma Point class"""

    def __init__(self, x=0, y=0, z=0):
        ...

    def copy(self):
        """Returns a copy of the point in another ptPoint3 object"""
        ...

    def distance(self, other):
        """Computes the distance from this point to 'other' point"""
        ...

    def distanceSq(self, other):
        """Computes the distance squared from this point to 'other' point
        - this function is faster than distance(other)
        """
        ...

    def getX(self):
        """Returns the 'x' component of the point"""
        ...

    def getY(self):
        """Returns the 'y' component of the point"""
        ...

    def getZ(self):
        """Returns the 'z' component of the point"""
        ...

    def setX(self, x):
        """Sets the 'x' component of the point"""
        ...

    def setY(self, y):
        """Sets the 'y' component of the point"""
        ...

    def setZ(self, z):
        """Sets the 'z' component of the point"""
        ...

    def zero(self):
        """Sets the 'x','y' and the 'z' component to zero"""
        ...

class ptSDL:
    """SDL accessor"""

    def sendToClients(self, key):
        """Sets it so changes to this key are sent to the
        server AND the clients. (Normally it just goes
        to the server.)
        """
        ...

    def setDefault(self, key, value):
        """Like setitem, but doesn't broadcast over the net.
        Only use for setting defaults that everyone will
        already know (from reading it off disk)
        """
        ...

    def setFlags(self, name, sendImmediate, skipOwnershipCheck):
        """Sets the flags for a variable in this SDL"""
        ...

    def setIndex(self, key, idx, value):
        """Sets the value at a specific index in the tuple,
        so you don't have to pass the whole thing in
        """
        ...

    def setIndexNow(self, key, idx, value):
        """Same as setIndex but sends immediately"""
        ...

    def setNotify(self, selfkey, key, tolerance):
        """Sets the OnSDLNotify to be called when 'key'
        SDL variable changes by 'tolerance' (if number)
        """
        ...

    def setTagString(self, name, tag):
        """Sets the tag string for a variable"""
        ...

class ptSDLStateDataRecord:
    """Basic SDL state data record class"""

    def findVar(self, name):
        """Finds and returns the specified ptSimpleStateVariable"""
        ...

    def getName(self):
        """Returns our record's name"""
        ...

    def getVarList(self):
        """Returns the names of the vars we hold as a list of strings"""
        ...

    def setFromDefaults(self, timeStampNow):
        """Sets all our vars to their defaults"""
        ...

class ptSceneobject:
    """Plasma Sceneobject class"""

    avatar: Any

    draw: Any

    particle: Any

    physics: Any

    def __init__(self, objKey, selfKey):
        ...

    def addKey(self, key):
        """Mostly used internally.
        Add another sceneobject ptKey
        """
        ...

    def animate(self):
        """If we can animate, start animating"""
        ...

    def avatarVelocity(self):
        """Returns the velocity of the first attached avatar scene object"""
        ...

    def fastForwardAttachedResponder(self, state):
        """Fast forward the attached responder to the specified state"""
        ...

    def findObject(self, name):
        """Find a particular object in just the sceneobjects that are attached"""
        ...

    def getImageLibMods(self):
        """Returns list of ptKeys of the image library modifiers attached to this sceneobject"""
        ...

    def getKey(self):
        """Get the ptKey of this sceneobject
        If there are more then one attached, get the first one
        """
        ...

    def getLocalToParent(self):
        """Returns ptMatrix44 of the local to parent transform for this sceneobject
        - If there is more than one sceneobject attached, returns just the first one
        """
        ...

    def getLocalToWorld(self):
        """Returns ptMatrix44 of the local to world transform for this sceneobject
        - If there is more than one sceneobject attached, returns just the first one
        """
        ...

    def getName(self):
        """Returns the name of the sceneobject (Max name)
        - If there are more than one sceneobject attached, return just the first one
        """
        ...

    def getParentToLocal(self):
        """Returns ptMatrix44 of the parent to local transform for this sceneobject
        - If there is more than one sceneobject attached, returns just the first one
        """
        ...

    def getPythonMods(self):
        """Returns list of ptKeys of the python modifiers attached to this sceneobject"""
        ...

    def getResponderState(self):
        """Return the responder state (if we are a responder)"""
        ...

    def getResponders(self):
        """Returns list of ptKeys of the responders attached to this sceneobject"""
        ...

    def getSoundIndex(self, sndComponentName):
        """Get the index of the requested sound component"""
        ...

    def getWorldToLocal(self):
        """Returns ptMatrix44 of the world to local transform for this sceneobject
        - If there is more than one sceneobject attached, returns just the first one
        """
        ...

    def isAvatar(self):
        """Returns true if the scene object is an avatar"""
        ...

    def isHuman(self):
        """Returns true if the scene object is a human avatar"""
        ...

    def isLocallyOwned(self):
        """Returns true(1) if this object is locally owned by this client
        or returns false(0) if it is not or don't know
        """
        ...

    def netForce(self, forceFlag):
        """Specify whether this object needs to use messages that are forced to the network
        - This is to be used if your Python program is running on only one client
        Such as a game master, only running on the client that owns a particular object
        - Setting the netForce flag on a sceneobject will also set the netForce flag on
        its draw, physics, avatar, particle objects
        """
        ...

    def playAnimNamed(self, animName):
        """Play the attached named animation"""
        ...

    def popCamera(self, avKey):
        """Pop the camera stack and go back to the previous camera"""
        ...

    def popCutsceneCamera(self, avKey):
        """Pop the camera stack and go back to previous camera."""
        ...

    def position(self):
        """Returns the scene object's current position"""
        ...

    def pushCamera(self, avKey):
        """Switch to this object (if it is a camera)"""
        ...

    def pushCameraCut(self, avKey):
        """Switch to this object, cutting the view (if it is a camera)"""
        ...

    def pushCutsceneCamera(self, cutFlag, avKey):
        """Switch to this object (assuming that it is actually a camera)"""
        ...

    def rewindAnimNamed(self, animName):
        """Rewind the attached named animation"""
        ...

    def right(self):
        """Returns the scene object's current right vector"""
        ...

    def runAttachedResponder(self, state):
        """Run the attached responder to the specified state"""
        ...

    def setSoundFilename(self, index, filename, isCompressed):
        """Sets the sound attached to this sceneobject to use the specified sound file."""
        ...

    def setTransform(self, local2world, world2local):
        """Set our current transforms"""
        ...

    def stopAnimNamed(self, animName):
        """Stop the attached named animation"""
        ...

    def up(self):
        """Returns the scene object's current up vector"""
        ...

    def view(self):
        """Returns the scene object's current view vector"""
        ...

    def volumeSensorIgnoreExtraEnters(self, ignore):
        """Tells the volume sensor attached to this object to ignore extra enters (default), or not (hack for garrison)."""
        ...

    def volumeSensorNoArbitration(self, noArbitration):
        """Tells the volume sensor attached to this object whether or not to negotiate exclusive locks with the server."""
        ...

class ptSimpleStateVariable:
    """Basic SDL state data record class"""

    def getBool(self, idx=0):
        """Returns a boolean variable's value"""
        ...

    def getByte(self, idx=0):
        """Returns a byte variable's value"""
        ...

    def getDefault(self):
        """Returns the variable's default"""
        ...

    def getDisplayOptions(self):
        """Returns the variable's display options"""
        ...

    def getDouble(self, idx=0):
        """Returns a double variable's value"""
        ...

    def getFloat(self, idx=0):
        """Returns a float variable's value"""
        ...

    def getInt(self, idx=0):
        """Returns an int variable's value"""
        ...

    def getKey(self, idx=0):
        """Returns a plKey variable's value"""
        ...

    def getShort(self, idx=0):
        """Returns a short variable's value"""
        ...

    def getString(self, idx=0):
        """Returns a string variable's value"""
        ...

    def getType(self):
        """Returns the variable's type"""
        ...

    def isAlwaysNew(self):
        """Is this variable always new?"""
        ...

    def isInternal(self):
        """Is this an internal variable?"""
        ...

    def isUsed(self):
        """Is this variable used?"""
        ...

    def setBool(self, val, idx=0):
        """Sets a boolean variable's value"""
        ...

    def setByte(self, val, idx=0):
        """Sets a byte variable's value"""
        ...

    def setDouble(self, val, idx=0):
        """Sets a double variable's value"""
        ...

    def setFloat(self, val, idx=0):
        """Sets a float variable's value"""
        ...

    def setInt(self, val, idx=0):
        """Sets an int variable's value"""
        ...

    def setShort(self, val, idx=0):
        """Sets a short variable's value"""
        ...

    def setString(self, val, idx=0):
        """Sets a string variable's value"""
        ...

class ptSpawnPointInfo:
    """Class to hold spawn point data"""

    def __init__(self, title=None, spawnPt=None):
        ...

    def getCameraStack(self):
        """Returns the camera stack for this spawnpoint as a string"""
        ...

    def getName(self):
        """Returns the spawnpoint's name"""
        ...

    def getTitle(self):
        """Returns the spawnpoint's title"""
        ...

    def setCameraStack(self, stack):
        """Sets the spawnpoint's camera stack (as a string)"""
        ...

    def setName(self, name):
        """Sets the spawnpoint's name"""
        ...

    def setTitle(self, title):
        """Sets the spawnpoint's title"""
        ...

class ptSpawnPointInfoRef:
    """Class to hold spawn point data"""

    def getCameraStack(self):
        """Returns the camera stack for this spawnpoint as a string"""
        ...

    def getName(self):
        """Returns the spawnpoint's name"""
        ...

    def getTitle(self):
        """Returns the spawnpoint's title"""
        ...

    def setCameraStack(self, stack):
        """Sets the spawnpoint's camera stack (as a string)"""
        ...

    def setName(self, name):
        """Sets the spawnpoint's name"""
        ...

    def setTitle(self, title):
        """Sets the spawnpoint's title"""
        ...

class ptStatusLog:
    """A status log class"""

    def close(self):
        """Close the status log file"""
        ...

    def isOpen(self):
        """Returns whether the status log is currently opened"""
        ...

    def open(self, logName, numLines, flags):
        """Open a status log for writing to
        'logname' is the name of the log file (example: special.log)
        'numLines' is the number of lines to display on debug screen
        'flags' is a PlasmaConstants.PtStatusLogFlags
        """
        ...

    def write(self, text, color=None):
        """If the status log is open, write 'text' to log
        'color' is the display color in debug screen
        """
        ...

class ptStream:
    """A basic stream class"""

    def close(self):
        """Close the status log file"""
        ...

    def isOpen(self):
        """Returns whether the stream file is currently opened"""
        ...

    def open(self, fileName, flags):
        """Open a stream file for reading or writing"""
        ...

    def readlines(self):
        """Reads a list of strings from the file"""
        ...

    def writelines(self, lines):
        """Write a list of strings to the file"""
        ...

class ptSwimCurrentInterface:
    """Creates a new ptSwimCurrentInterface"""

    farDistance: Any
    """UNKNOWN"""

    farVelocity: Any
    """UNKNOWN"""

    nearDistance: Any
    """UNKNOWN"""

    nearVelocity: Any
    """UNKNOWN"""

    rotation: Any
    """UNKNOWN"""

    def __init__(self, key):
        ...

    def disable(self):
        """UNKNOWN"""
        ...

    def enable(self):
        """UNKNOWN"""
        ...

class ptVault:
    """Accessor class to the player's vault"""

    def addChronicleEntry(self, entryName, type, string):
        """Adds an entry to the player's chronicle with a value of 'string'."""
        ...

    def amAgeCzar(self, ageInfo):
        """Are we the czar (WTH is this?) of the specified age?"""
        ...

    def amAgeOwner(self, ageInfo):
        """Are we the owner of the specified age?"""
        ...

    def amCzarOfCurrentAge(self):
        """Are we the czar (WTH is this?) of the current age?"""
        ...

    def amOwnerOfCurrentAge(self):
        """Are we the owner of the current age?"""
        ...

    def createNeighborhood(self):
        """Creates a new neighborhood"""
        ...

    def findChronicleEntry(self, entryName):
        """Returns a ptVaultNode of type kNodeTypeChronicle of the current player's chronicle entry by entryName."""
        ...

    def findNode(self, templateNode):
        """Find the node matching the template"""
        ...

    def getAgeJournalsFolder(self):
        """Returns a ptVaultFolderNode of the current player's age journals folder."""
        ...

    def getAgesICanVisitFolder(self):
        """Returns a ptVaultFolderNode of ages I can visit"""
        ...

    def getAgesIOwnFolder(self):
        """Returns a ptVaultFolderNode of ages that I own"""
        ...

    def getAllPlayersFolder(self):
        """Returns a ptVaultPlayerInfoListNode of the all players folder."""
        ...

    def getAvatarClosetFolder(self):
        """Do not use.
        Returns a ptVaultFolderNode of the avatars outfit in their closet.
        """
        ...

    def getAvatarOutfitFolder(self):
        """Do not use.
        Returns a ptVaultFolderNode of the avatars outfit.
        """
        ...

    def getBuddyListFolder(self):
        """Returns a ptVaultPlayerInfoListNode of the current player's buddy list folder."""
        ...

    def getChronicleFolder(self):
        """Returns a ptVaultFolderNode of the current player's chronicle folder."""
        ...

    def getGlobalInbox(self):
        """Returns a ptVaultFolderNode of the global inbox folder."""
        ...

    def getIgnoreListFolder(self):
        """Returns a ptVaultPlayerInfoListNode of the current player's ignore list folder."""
        ...

    def getInbox(self):
        """Returns a ptVaultFolderNode of the current player's inbox folder."""
        ...

    def getInviteFolder(self):
        """Returns a ptVaultFolderNode of invites"""
        ...

    def getKIUsage(self):
        """Returns a tuple with usage statistics of the KI (# of pics, # of text notes, # of marker games)"""
        ...

    def getLinkToCity(self):
        """Returns a ptVaultAgeLinkNode that will go to the city"""
        ...

    def getLinkToMyNeighborhood(self):
        """Returns a ptVaultAgeLinkNode that will go to my neighborhood"""
        ...

    def getOwnedAgeLink(self, ageInfo):
        """Returns a ptVaultAgeLinkNode to my owned age(ageInfo)"""
        ...

    def getPeopleIKnowAboutFolder(self):
        """Returns a ptVaultPlayerInfoListNode of the current player's people I know about (Recent) list folder."""
        ...

    def getPlayerInfo(self):
        """Returns a ptVaultNode of type kNodeTypePlayerInfo of the current player"""
        ...

    def getPsnlAgeSDL(self):
        """Returns the personal age SDL"""
        ...

    def getVisitAgeLink(self, ageInfo):
        """Returns a ptVaultAgeLinkNode for a visitor to age(ageInfo)"""
        ...

    def inMyNeighborhoodAge(self):
        """Are we in the player's neighborhood age?"""
        ...

    def inMyPersonalAge(self):
        """Are we in the player's personal age?"""
        ...

    def invitePlayerToAge(self, link, playerID):
        """Sends an invitation to visit the age to the specified player"""
        ...

    def offerLinkToPlayer(self, link, playerID):
        """Offer a one-time link to the specified player"""
        ...

    def registerMTStation(self, stationName, mtSpawnPoint):
        """Registers this player at the specified mass-transit point"""
        ...

    def registerOwnedAge(self, link):
        """Registers the specified age as owned by the player"""
        ...

    def registerVisitAge(self, link):
        """Register this age as visitable by this player"""
        ...

    def setAgePublic(self, ageInfo, makePublic):
        """Makes the specified age public or private"""
        ...

    def unInvitePlayerToAge(self, guid, playerID):
        """Revokes the invitation to visit the age"""
        ...

    def unRegisterOwnedAge(self, ageFilename):
        """Unregisters the specified age so it's no longer owned by this player"""
        ...

    def unRegisterVisitAge(self, guid):
        """Unregisters the specified age so it can no longer be visited by this player"""
        ...

    def updatePsnlAgeSDL(self, pyrec):
        """Updates the personal age SDL to the specified data"""
        ...

class ptVaultNode:
    """Vault node class"""

    def addNode(self, node, cb=None, cbContext=0):
        """Adds 'node'(ptVaultNode) as a child to this node."""
        ...

    def findNode(self, templateNode: ptVaultNode, /, maxDepth: int = 1) -> Optional[ptVaultNode]:
        """Returns ptVaultNode if child node found matching template, or None"""
        ...

    def forceSave(self):
        """Force the current node to save immediately"""
        ...

    def getChildNodeCount(self):
        """Returns how many children this node has."""
        ...

    def getChildNodeRefList(self):
        """Returns a list of ptVaultNodeRef that are the children of this node."""
        ...

    def getClientID(self):
        """Returns the client's ID."""
        ...

    def getCreateAgeCoords(self):
        """Returns the location in the Age where this node was created."""
        ...

    def getCreateAgeGuid(self):
        """Returns the guid as a string of the Age where this node was created."""
        ...

    def getCreateAgeName(self):
        """Returns the name of the Age where this node was created."""
        ...

    def getCreateAgeTime(self):
        """Returns the time in the Age that the node was created...(?)"""
        ...

    def getCreateTime(self):
        """Returns the when this node was created, that is useable by python's time library."""
        ...

    def getCreatorNode(self):
        """Returns the creator's node"""
        ...

    def getCreatorNodeID(self):
        """Returns the creator's node ID"""
        ...

    def getID(self):
        """Returns the unique ID of this ptVaultNode."""
        ...

    def getModifyTime(self):
        """Returns the modified time of this node, that is useable by python's time library."""
        ...

    def getNode(self, id):
        """Returns ptVaultNodeRef if is a child node, or None"""
        ...

    def getOwnerNode(self):
        """Returns a ptVaultNode of the owner of this node"""
        ...

    def getOwnerNodeID(self):
        """Returns the node ID of the owner of this node"""
        ...

    def getType(self):
        """Returns the type of ptVaultNode this is.
        See PlasmaVaultTypes.py
        """
        ...

    def hasNode(self, id):
        """Returns true if node if a child node"""
        ...

    def linkToNode(self, nodeID, cb=None, cbContext=0):
        """Adds a link to the node designated by nodeID"""
        ...

    def removeAllNodes(self):
        """Removes all the child nodes on this node."""
        ...

    def removeNode(self, node, cb=None, cbContext=0):
        """Removes the child 'node'(ptVaultNode) from this node."""
        ...

    def save(self, cb=None, cbContext=0):
        """Save the changes made to this node."""
        ...

    def saveAll(self, cb=None, cbContext=0):
        """Saves this node and all its children nodes."""
        ...

    def sendTo(self, destID, cb=None, cbContext=0):
        """Send this node to inbox at 'destID'"""
        ...

    def setCreateAgeGuid(self, guid):
        """Set guid as a string of the Age where this node was created."""
        ...

    def setCreateAgeName(self, name):
        """Set name of the Age where this node was created."""
        ...

    def setCreatorNodeID(self, id):
        """Set creator's node ID"""
        ...

    def setID(self, id):
        """Sets ID of this ptVaultNode."""
        ...

    def setOwnerNodeID(self, id):
        """Set node ID of the owner of this node"""
        ...

    def setType(self, type):
        """Set the type of ptVaultNode this is."""
        ...

    def upcastToAgeInfoListNode(self):
        """Returns this ptVaultNode as ptVaultAgeInfoListNode"""
        ...

    def upcastToAgeInfoNode(self):
        """Returns this ptVaultNode as ptVaultAgeInfoNode"""
        ...

    def upcastToAgeLinkNode(self):
        """Returns this ptVaultNode as ptVaultAgeLinkNode"""
        ...

    def upcastToChronicleNode(self):
        """Returns this ptVaultNode as ptVaultChronicleNode"""
        ...

    def upcastToFolderNode(self):
        """Returns this ptVaultNode as ptVaultFolderNode"""
        ...

    def upcastToImageNode(self):
        """Returns this ptVaultNode as ptVaultImageNode"""
        ...

    def upcastToMarkerGameNode(self):
        """Returns this ptVaultNode as ptVaultMarkerNode"""
        ...

    def upcastToPlayerInfoListNode(self):
        """Returns this ptVaultNode as ptVaultPlayerInfoListNode"""
        ...

    def upcastToPlayerInfoNode(self):
        """Returns this ptVaultNode as ptVaultPlayerInfoNode"""
        ...

    def upcastToPlayerNode(self):
        """Returns this ptVaultNode as a ptVaultPlayerNode"""
        ...

    def upcastToSDLNode(self):
        """Returns this ptVaultNode as a ptVaultSDLNode"""
        ...

    def upcastToSystemNode(self):
        """Returns this ptVaultNode as a ptVaultSystemNode"""
        ...

    def upcastToTextNoteNode(self):
        """Returns this ptVaultNode as ptVaultTextNoteNode"""
        ...

class ptVaultFolderNode(ptVaultNode):
    """Plasma vault folder node"""

    def __init__(self, n=0):
        ...

    def getFolderName(self):
        """Returns the folder's name"""
        ...

    def getFolderType(self):
        """Returns the folder type (of the standard folder types)"""
        ...

    def setFolderName(self, name):
        """Set the folder name"""
        ...

    def setFolderType(self, type):
        """Set the folder type"""
        ...

class ptVaultAgeInfoListNode(ptVaultFolderNode):
    """Plasma vault age info list node"""

    def __init__(self, n=0):
        ...

    def addAge(self, ageID):
        """Adds ageID to list of ages"""
        ...

    def hasAge(self, ageID):
        """Returns whether ageID is in the list of ages"""
        ...

    def removeAge(self, ageID):
        """Removes ageID from list of ages"""
        ...

class ptVaultAgeInfoNode(ptVaultNode):
    """Plasma vault age info node"""

    def __init__(self, n=0):
        ...

    def asAgeInfoStruct(self):
        """Returns this ptVaultAgeInfoNode as a ptAgeInfoStruct"""
        ...

    def getAgeDescription(self):
        """Returns the description of the age"""
        ...

    def getAgeFilename(self):
        """Returns the age filename"""
        ...

    def getAgeID(self):
        """Returns the age ID"""
        ...

    def getAgeInstanceGuid(self):
        """Returns the age instance guid"""
        ...

    def getAgeInstanceName(self):
        """Returns the instance name of the age"""
        ...

    def getAgeLanguage(self):
        """Returns the age's language (integer)"""
        ...

    def getAgeOwnersFolder(self):
        """Returns a ptVaultPlayerInfoList of the players that own this age"""
        ...

    def getAgeSDL(self):
        """Returns a ptVaultSDLNode of the age's SDL"""
        ...

    def getAgeSequenceNumber(self):
        """Returns the sequence number of this instance of the age"""
        ...

    def getAgeUserDefinedName(self):
        """Returns the user define part of the age name"""
        ...

    def getCanVisitFolder(self):
        """Returns a ptVaultPlayerInfoList of the players that can visit this age"""
        ...

    def getChildAgesFolder(self):
        """Returns a ptVaultFolderNode of the child ages of this age"""
        ...

    def getCzar(self):
        """Returns ptVaultPlayerInfoNode of the player that is the Czar"""
        ...

    def getCzarID(self):
        """Returns the ID of the age's czar"""
        ...

    def getDisplayName(self):
        """Returns the displayable version of the age name"""
        ...

    def getParentAgeLink(self):
        """Returns ptVaultAgeLinkNode of the age's parent age, or None if not a child age"""
        ...

    def isPublic(self):
        """Returns whether the age is Public or Not"""
        ...

    def setAgeDescription(self, description):
        """Sets the description of the age"""
        ...

    def setAgeFilename(self, fileName):
        """Sets the filename"""
        ...

    def setAgeID(self, ageID):
        """Sets the age ID"""
        ...

    def setAgeInstanceGuid(self, guid):
        """Sets the age instance GUID"""
        ...

    def setAgeInstanceName(self, instanceName):
        """Sets the instance name"""
        ...

    def setAgeLanguage(self, lang):
        """Sets the age's language (integer)"""
        ...

    def setAgeSequenceNumber(self, seqNumber):
        """Sets the sequence number"""
        ...

    def setAgeUserDefinedName(self, udname):
        """Sets the user defined part of the name"""
        ...

class ptVaultAgeLinkNode(ptVaultNode):
    """Plasma vault age link node"""

    def __init__(self, n=0):
        ...

    def addSpawnPoint(self, point):
        """Adds the specified ptSpawnPointInfo or ptSpawnPointInfoRef"""
        ...

    def asAgeLinkStruct(self):
        """Returns this ptVaultAgeLinkNode as a ptAgeLinkStruct"""
        ...

    def getAgeInfo(self):
        """Returns the ageInfo as a ptAgeInfoStruct"""
        ...

    def getLocked(self):
        """Returns whether the link is locked or not"""
        ...

    def getSpawnPoints(self):
        """Returns a list of ptSpawnPointInfo objects"""
        ...

    def getVolatile(self):
        """Returns whether the link is volatile or not"""
        ...

    def hasSpawnPoint(self, spawnPtName):
        """Returns true if this link has the specified spawn point"""
        ...

    def removeSpawnPoint(self, point):
        """Removes the specified spawn point based on a ptSpawnPointInfo, ptSpawnPointInfoRef, or string"""
        ...

    def setLocked(self, state):
        """Sets whether the link is locked or not"""
        ...

    def setVolatile(self, state):
        """Sets the state of the volitility of the link"""
        ...

class ptVaultChronicleNode(ptVaultNode):
    """Plasma vault chronicle node"""

    def __init__(self, n=0):
        ...

    def getEntryType(self):
        """Returns the user defined type of the chronicle node."""
        ...

    def getName(self):
        """Returns the name of the chronicle node."""
        ...

    def getValue(self):
        """Returns the value as a string of this chronicle node."""
        ...

    def setEntryType(self, type):
        """Sets this chronicle node to a user defined type."""
        ...

    def setName(self, name):
        """Sets the name of the chronicle node."""
        ...

    def setValue(self, value):
        """Sets the chronicle to a value that is a string"""
        ...

class ptVaultImageNode(ptVaultNode):
    """Plasma vault image node"""

    def __init__(self, n=0):
        ...

    def getImage(self):
        """Returns the image(ptImage) of this image node"""
        ...

    def getTitle(self):
        """Returns the title (caption) of this image node"""
        ...

    def setImage(self, image):
        """Sets the image(ptImage) of this image node"""
        ...

    def setImageFromBuf(self, buf):
        """Sets our image from a buffer"""
        ...

    def setImageFromScrShot(self):
        """Grabs a screenshot and stuffs it into this node"""
        ...

    def setTitle(self, title):
        """Sets the title (caption) of this image node"""
        ...

class ptVaultMarkerGameNode(ptVaultNode):
    """Plasma vault age info node"""

    def __init__(self, n=0):
        ...

    def getGameGuid(self):
        """Returns the marker game's guid"""
        ...

    def getGameName(self):
        """Returns the marker game's name"""
        ...

    def getMarkers(self):
        """Returns a tuple of markers associated with this game"""
        ...

    def getReward(self):
        """Returns a string representing the reward for completing this game"""
        ...

    def setGameGuid(self, guid):
        """Sets the marker game's guid"""
        ...

    def setGameName(self, name):
        """Sets marker game's name"""
        ...

    def setMarkers(self, markers):
        """Sets markers associated with this game"""
        ...

    def setReward(self, reward):
        """Sets the reward for completing this marker game"""
        ...

class ptVaultNodeRef:
    """Vault node relationship pseudo class"""

    def beenSeen(self):
        """Returns true until we reimplement this"""
        ...

    def getChild(self):
        """Returns a ptVaultNode that is the child of this reference"""
        ...

    def getChildID(self):
        """Returns id of the child node"""
        ...

    def getParent(self):
        """Returns a ptVaultNode that is the parent of the reference"""
        ...

    def getParentID(self):
        """Returns id of the parent node"""
        ...

    def getSaver(self):
        """Returns a ptVaultPlayerInfoNode of player that created this relationship"""
        ...

    def getSaverID(self):
        """Returns id of player that created this relationship"""
        ...

    def setSeen(self):
        """Does nothing until we reimplement this"""
        ...

class ptVaultPlayerInfoListNode(ptVaultFolderNode):
    """Plasma vault player info list node"""

    def __init__(self, n=0):
        ...

    def addPlayer(self, playerID):
        """Adds playerID player to this player info list node."""
        ...

    def getPlayer(self, playerID):
        """Gets the player info node for the specified player."""
        ...

    def hasPlayer(self, playerID):
        """Returns whether the 'playerID' is a member of this player info list node."""
        ...

    def removePlayer(self, playerID):
        """Removes playerID player from this player info list node."""
        ...

    def sort(self):
        """Sorts the player list by some means...?"""
        ...

class ptVaultPlayerInfoNode(ptVaultNode):
    """Plasma vault folder node"""

    def playerGetAgeGuid(self):
        """Returns the guid as a string of where the player is for this player info node."""
        ...

    def playerGetAgeInstanceName(self):
        """Returns the name of the Age where the player is for this player info node."""
        ...

    def playerGetCCRLevel(self):
        """Returns the ccr level of the player for this player info node."""
        ...

    def playerGetID(self):
        """Returns the player ID for this player info node."""
        ...

    def playerGetName(self):
        """Returns the player name of this player info node."""
        ...

    def playerIsOnline(self):
        """Returns the online status of the player for this player info node."""
        ...

    def playerSetAgeGuid(self, guidString):
        """Not sure this should be used. Sets the guid for this player info node."""
        ...

    def playerSetAgeInstanceName(self, name):
        """Not sure this should be used. Sets the name of the age where the player is for this player info node."""
        ...

    def playerSetID(self, playerID):
        """Not sure this should be used. Sets the playerID for this player info node."""
        ...

    def playerSetName(self, name):
        """Not sure this should be used. Sets the player name of this player info node."""
        ...

    def playerSetOnline(self, state):
        """Not sure this should be used. Sets the state of the player online status for this player info node."""
        ...

class ptVaultPlayerNode(ptVaultNode):
    """Plasma vault player node"""

    def getAvatarShapeName(self):
        """Returns the avatar's 'shape'"""
        ...

    def getOnlineTime(self):
        """Returns the avatar's online time"""
        ...

    def getPlayerName(self):
        """Returns the player's name"""
        ...

    def isDisabled(self):
        """Is the avatar disabled?"""
        ...

    def isExplorer(self):
        """Returns true for 'explorer', false for 'visitor'."""
        ...

    def setAvatarShapeName(self, name):
        """Sets the avatar's 'shape'"""
        ...

    def setDisabled(self, state):
        """Disables/enables the avatar"""
        ...

    def setExplorer(self, boolean):
        """set true for 'explorer', false for 'visitor'"""
        ...

    def setOnlineTime(self, time):
        """Sets the avatar's online time"""
        ...

    def setPlayerName(self, name):
        """Sets the player's name"""
        ...

class ptVaultSDLNode(ptVaultNode):
    """Plasma vault SDL node"""

    def getIdent(self):
        """UNKNOWN"""
        ...

    def getStateDataRecord(self):
        """Returns the ptSDLStateDataRecord associated with this node"""
        ...

    def initStateDataRecord(self, filename, flags):
        """Read the SDL Rec from File if needed"""
        ...

    def setIdent(self, v):
        """UNKNOWN"""
        ...

    def setStateDataRecord(self, rec, writeOptions=0):
        """Sets the ptSDLStateDataRecord"""
        ...

class ptVaultSystemNode(ptVaultNode):
    """Plasma vault system node"""

class ptVaultTextNoteNode(ptVaultNode):
    """Plasma vault text note node"""

    def getDeviceInbox(self):
        """Returns a ptVaultFolderNode"""
        ...

    def getNoteSubType(self):
        """Returns the subtype of this text note node."""
        ...

    def getNoteType(self):
        """Returns the type of text note for this text note node."""
        ...

    def getText(self):
        """Returns the text of this text note node."""
        ...

    def getTitle(self):
        """Returns the title of this text note node."""
        ...

    def setDeviceInbox(self, inboxName, cb=None, cbContext=0):
        """Sets the device inbox"""
        ...

    def setNoteSubType(self, subType):
        """Sets the subtype of the this text note node."""
        ...

    def setNoteType(self, type):
        """Sets the type of text note for this text note node."""
        ...

    def setText(self, text):
        """Sets text of the this text note node."""
        ...

    def setTitle(self, title):
        """Sets the title of this text note node."""
        ...

class ptVector3:
    """Plasma 3D Vector class"""

    def __init__(self, x=0, y=0, z=0):
        ...

    def add(self, other):
        """Adds other to the current vector"""
        ...

    def copy(self):
        """Copies the vector into another one (which it returns)"""
        ...

    def crossProduct(self, other):
        """Finds the cross product between other and this vector"""
        ...

    def dotProduct(self, other):
        """Finds the dot product between other and this vector"""
        ...

    def getX(self):
        """Returns the 'x' component of the vector"""
        ...

    def getY(self):
        """Returns the 'y' component of the vector"""
        ...

    def getZ(self):
        """Returns the 'z' component of the vector"""
        ...

    def length(self):
        """Returns the length of the vector"""
        ...

    def lengthSq(self):
        """Returns the length of the vector, squared
        - this function is faster then length(other)
        """
        ...

    def normalize(self):
        """Normalizes the vector to length 1"""
        ...

    def scale(self, scale):
        """Scale the vector by scale"""
        ...

    def setX(self, x):
        """Sets the 'x' component of the vector"""
        ...

    def setY(self, y):
        """Sets the 'y' component of the vector"""
        ...

    def setZ(self, z):
        """Sets the 'z' component of the vector"""
        ...

    def subtract(self, other):
        """Subtracts other from the current vector"""
        ...

    def zero(self):
        """Zeros the vector's components"""
        ...

class ptWaveSet:
    """Creates a new ptWaveSet"""

    def __init__(self, key):
        ...

    def addBuoy(self, soKey: ptKey) -> None:
        """Adds the specified object as a buoy"""
        ...

    def getDepthFalloff(self):
        """Returns the attribute's value"""
        ...

    def getEnvCenter(self):
        """Returns the attribute's value"""
        ...

    def getEnvRadius(self):
        """Returns the attribute's value"""
        ...

    def getGeoAmpOverLen(self):
        """Returns the attribute's value"""
        ...

    def getGeoAngleDev(self):
        """Returns the attribute's value"""
        ...

    def getGeoChop(self):
        """Returns the attribute's value"""
        ...

    def getGeoMaxLength(self):
        """Returns the attribute's value"""
        ...

    def getGeoMinLength(self):
        """Returns the attribute's value"""
        ...

    def getMaxAtten(self):
        """Returns the attribute's value"""
        ...

    def getMinAtten(self):
        """Returns the attribute's value"""
        ...

    def getOpacFalloff(self):
        """Returns the attribute's value"""
        ...

    def getOpacOffset(self):
        """Returns the attribute's value"""
        ...

    def getReflFalloff(self):
        """Returns the attribute's value"""
        ...

    def getReflOffset(self):
        """Returns the attribute's value"""
        ...

    def getRippleScale(self):
        """Returns the attribute's value"""
        ...

    def getSpecularEnd(self):
        """Returns the attribute's value"""
        ...

    def getSpecularMute(self):
        """Returns the attribute's value"""
        ...

    def getSpecularNoise(self):
        """Returns the attribute's value"""
        ...

    def getSpecularStart(self):
        """Returns the attribute's value"""
        ...

    def getSpecularTint(self):
        """Returns the attribute's value"""
        ...

    def getTexAmpOverLen(self):
        """Returns the attribute's value"""
        ...

    def getTexAngleDev(self):
        """Returns the attribute's value"""
        ...

    def getTexChop(self):
        """Returns the attribute's value"""
        ...

    def getTexMaxLength(self):
        """Returns the attribute's value"""
        ...

    def getTexMinLength(self):
        """Returns the attribute's value"""
        ...

    def getWaterHeight(self):
        """Returns the attribute's value"""
        ...

    def getWaterOffset(self):
        """Returns the attribute's value"""
        ...

    def getWaterOpacity(self):
        """Returns the attribute's value"""
        ...

    def getWaterTint(self):
        """Returns the attribute's value"""
        ...

    def getWaveFalloff(self):
        """Returns the attribute's value"""
        ...

    def getWaveOffset(self):
        """Returns the attribute's value"""
        ...

    def getWindDir(self):
        """Returns the attribute's value"""
        ...

    def removeBuoy(self, soKey: ptKey) -> None:
        """Removes the specified object as a buoy"""
        ...

    def setDepthFalloff(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setEnvCenter(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setEnvRadius(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setGeoAmpOverLen(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setGeoAngleDev(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setGeoChop(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setGeoMaxLength(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setGeoMinLength(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setMaxAtten(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setMinAtten(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setOpacFalloff(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setOpacOffset(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setReflFalloff(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setReflOffset(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setRippleScale(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setSpecularEnd(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setSpecularMute(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setSpecularNoise(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setSpecularStart(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setSpecularTint(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setTexAmpOverLen(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setTexAngleDev(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setTexChop(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setTexMaxLength(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setTexMinLength(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWaterHeight(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWaterOffset(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWaterOpacity(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWaterTint(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWaveFalloff(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWaveOffset(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...

    def setWindDir(self, s, secs = 0):
        """Sets the attribute to s over secs time"""
        ...
