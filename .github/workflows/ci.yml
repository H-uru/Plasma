name: CI
on: [push, pull_request]

jobs:
  windows:
    runs-on: windows-latest
    name: ${{ matrix.platform.str }}-${{ matrix.cfg.str }}
    strategy:
      matrix:
        platform:
          - { generator: Visual Studio 17 2022, max-version: 7, arch: Win32, qt-arch: win32_msvc2019, qt-version: 5.15.2,  str: windows-x86 }
          - { generator: Visual Studio 17 2022, max-version: 2022, arch: x64, qt-arch: win64_msvc2019_64, qt-version: 5.15.2,  str: windows-x64 }
        cfg:
          - { external: OFF, type: RelWithPDB, str: internal-release }
          - { external: OFF, type: Debug, str: internal-debug }
          - { external: ON, type: RelWithPDB, str: external-release }

    steps:
      - name: Checkout Plasma
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout MaxSDK
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: H-uruMachineUser/3dsMaxSDK
          token: ${{ secrets.MACHINE_USER_REPO_READ }}
          path: maxsdk

      - name: Install Qt
        continue-on-error: true
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.platform.qt-version }}
          arch: ${{ matrix.platform.qt-arch }}
          dir: ${{ github.workspace }}/qt

      - name: Configure
        run: |
          cmake `
            -G "${{ matrix.platform.generator }}" -A "${{ matrix.platform.arch }}" `
            -DPLASMA_BUILD_MAX_PLUGIN=ON `
            -DPLASMA_BUILD_TESTS=ON `
            -DPLASMA_BUILD_TOOLS=ON `
            -DPLASMA_EXTERNAL_RELEASE=${{ matrix.cfg.external }} `
            -DPLASMA_VCPKG_NUGET_SOURCE="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
            -DPLASMA_VCPKG_NUGET_OWNER="${{ github.repository_owner }}" `
            -DPLASMA_VCPKG_NUGET_TOKEN="${{ secrets.GITHUB_TOKEN }}" `
            -DPLASMA_VCPKG_NUGET_RW=TRUE `
            -D3dsm_PATH="${{ github.workspace }}/maxsdk/${{ matrix.platform.max-version }}" `
            -S . -B build

      - name: Build
        run: |
          cmake --build build --config "${{ matrix.cfg.type }}" -j 2

      - name: Install
        run: |
          cmake --build build --target INSTALL --config "${{ matrix.cfg.type }}" -j 2

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: plasma-${{ matrix.platform.str }}-${{ matrix.cfg.str }}
          path: build/install

      - name: Test
        run: |
          cmake --build build --target check --config "${{ matrix.cfg.type }}" -j 2

  # HACK to enable/disable the max CI based on presence/absence of secret. See also:
  # https://github.com/actions/runner/issues/1138
  max-secrets:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Check for Max SDK
    outputs:
      HAS_MACHINE_USER_TOKEN: ${{ steps.check.outputs.MACHINE_USER_TOKEN }}
    steps:
      - name: Check for Secret
        run: >
          echo "::set-output name=MACHINE_USER_TOKEN::${{ env.MACHINE_USER_TOKEN != '' }}";
        id: check
        env:
          MACHINE_USER_TOKEN: ${{ secrets.MACHINE_USER_REPO_READ }}

  max:
    # Can only run if we have a token for our super seekrit Max SDK repo. Sad.
    needs: ["max-secrets"]
    if: needs.max-secrets.outputs.HAS_MACHINE_USER_TOKEN == 'true'

    runs-on: windows-latest
    name: maxplugin-${{ matrix.cfg.str }}
    strategy:
      matrix:
        cfg:
          # Max 7 and 2020 are tested in the x86 and x64 windows build jobs, respectively.
          - { sdk-version: 2008, generator: Visual Studio 17 2022, arch: Win32, str: 2008-windows-x86 }
          - { sdk-version: 2012, generator: Visual Studio 17 2022, arch: Win32, str: 2012-windows-x86 }
          - { sdk-version: 2013, generator: Visual Studio 17 2022, arch: x64, str: 2013-windows-x64 }
          - { sdk-version: 2017, generator: Visual Studio 17 2022, arch: x64, str: 2017-windows-x64 }
          - { sdk-version: 2019, generator: Visual Studio 17 2022, arch: x64, str: 2019-windows-x64 }
          - { sdk-version: 2020, generator: Visual Studio 17 2022, arch: x64, str: 2020-windows-x64 }

    steps:
      - name: Checkout Plasma
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout MaxSDK
        uses: actions/checkout@v2
        with:
          repository: H-uruMachineUser/3dsMaxSDK
          token: ${{ secrets.MACHINE_USER_REPO_READ }}
          path: maxsdk

      - name: Configure
        run: |
          cmake `
            -G "${{ matrix.cfg.generator }}" -A "${{ matrix.cfg.arch }}" `
            -DPLASMA_BUILD_CLIENT=OFF `
            -DPLASMA_BUILD_MAX_PLUGIN=REQUIRED `
            -DPLASMA_BUILD_LAUNCHER=OFF `
            -DPLASMA_BUILD_TESTS=OFF `
            -DPLASMA_BUILD_TOOLS=OFF `
            -DPLASMA_VCPKG_NUGET_SOURCE="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
            -DPLASMA_VCPKG_NUGET_OWNER="${{ github.repository_owner }}" `
            -DPLASMA_VCPKG_NUGET_TOKEN="${{ secrets.GITHUB_TOKEN }}" `
            -DPLASMA_VCPKG_NUGET_RW=TRUE `
            -D3dsm_PATH="${{ github.workspace }}/maxsdk/${{ matrix.cfg.sdk-version }}" `
            -S . -B build

      - name: Build
        run: |
          cmake --build build --target INSTALL --config Release -j 2

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: max-${{ matrix.cfg.str }}
          path: build/install

  linux:
    runs-on: ubuntu-latest
    name: ${{ matrix.platform.str }}-${{ matrix.cfg.str }}
    strategy:
      matrix:
        platform:
          - { str: linux-x64 }
        cfg:
          - { external: OFF, type: RelWithDebInfo, str: internal-release }
          - { external: OFF, type: Debug, str: internal-debug }
          - { external: ON, type: RelWithDebInfo, str: external-release }

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              autoconf \
              cmake \
              libcairo2 \
              libsecret-1-dev \
              libtool \
              nasm \
              ninja-build \
              qtbase5-dev

      - name: Configure
        run: |
          cmake \
            -G Ninja \
            -DUSE_VCPKG=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg.type }} \
            -DPLASMA_BUILD_TESTS=ON \
            -DPLASMA_BUILD_TOOLS=ON \
            -DPLASMA_EXTERNAL_RELEASE=${{ matrix.cfg.external }} \
            -DPLASMA_VCPKG_NUGET_SOURCE="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -DPLASMA_VCPKG_NUGET_OWNER="${{ github.repository_owner }}" \
            -DPLASMA_VCPKG_NUGET_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -DPLASMA_VCPKG_NUGET_RW=TRUE \
            -S . -B build

      - name: Build
        run: |
          cmake --build build -j 2

      - name: Test
        run: |
          cmake --build build --target check -j 2

      - name: Install
        run: |
          cmake --build build --target install -j 2


  macos:
    runs-on: macos-latest
    name: ${{ matrix.platform.str }}-${{ matrix.cfg.str }}
    strategy:
      matrix:
        platform:
          - { str: macos-x64 }
        cfg:
          - { external: OFF, type: RelWithDebInfo, str: internal-release }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies
        run: |
          brew bundle

      - name: Configure
        run: |
          cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg.type }} \
            -DCMAKE_FIND_FRAMEWORK=LAST \
            -DPLASMA_BUILD_TESTS=ON \
            -DPLASMA_BUILD_TOOLS=ON \
            -DPLASMA_EXTERNAL_RELEASE=${{ matrix.cfg.external }} \
            -DQt5_ROOT=$(brew --prefix qt@5) \
            -DCURL_ROOT=$(brew --prefix curl) \
            -Dexpat_ROOT=$(brew --prefix expat) \
            -DOpenSSL_ROOT=$(brew --prefix openssl@1.1) \
            -DOpenAL_ROOT=$(brew --prefix openal-soft) \
            -DPython3_ROOT=$(brew --prefix python@3.10) \
            -DZLIB_ROOT=$(brew --prefix zlib) \
            -S . -B build

      - name: Build
        run: |
          cmake --build build -j 2

      - name: Test
        run: |
          cmake --build build --target check -j 2

      - name: Install
        run: |
          cmake --build build --target install -j 2
